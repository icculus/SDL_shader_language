/* This file is automatically generated by Lemon from input grammar
** source file "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon". */
/*
 * My changes over the original lempar.c from SQLite are encased in
 *  #if __SDL_SHADER__ blocks.  --ryan.
 */
#ifndef __SDL_SHADER__
#define __SDL_SHADER__ 1
#endif

#if !__SDL_SHADER__
#define LEMON_SUPPORT_TRACING (!defined(NDEBUG))
#endif

#if __SDL_SHADER__
/* Driver template for the LEMON parser generator.
** The original author(s) of lempar.c disclaim copyright to this source code.
**
**
** Additions made TO THIS FILE ONLY for SDL_shader_tools are also
** contributed to the public domain. The rest of SDL_shader_tools
** is licensed according to its LICENSE.txt file. --ryan.
*/
#endif

/*
** 2000-05-29
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Driver template for the LEMON parser generator.
**
** The "lemon" program processes an LALR(1) input grammar file, then uses
** this template to construct a parser.  The "lemon" program inserts text
** at each "%%" line.  Also, any "P-a-r-s-e" identifer prefix (without the
** interstitial "-" characters) contained in this template is changed into
** the value of the %name directive from the grammar.  Otherwise, the content
** of this template is copied straight through into the generate parser
** source file.
**
** The following is the concatenation of all %include directives from the
** input grammar file:
*/
/************ Begin %include sections from the grammar ************************/
#line 14 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"

#ifndef __SDL_SHADER_SDLSL_COMPILER__
#error Do not compile this file directly.
#endif
#line 57 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
/**************** End of %include directives **********************************/
/* These constants specify the various numeric values for terminal symbols.
***************** Begin token definitions *************************************/
#define TOKEN_SDLSL_COMMA                           1
#define TOKEN_SDLSL_ASSIGN                          2
#define TOKEN_SDLSL_PLUSASSIGN                      3
#define TOKEN_SDLSL_MINUSASSIGN                     4
#define TOKEN_SDLSL_STARASSIGN                      5
#define TOKEN_SDLSL_SLASHASSIGN                     6
#define TOKEN_SDLSL_PERCENTASSIGN                   7
#define TOKEN_SDLSL_LSHIFTASSIGN                    8
#define TOKEN_SDLSL_RSHIFTASSIGN                    9
#define TOKEN_SDLSL_ANDASSIGN                      10
#define TOKEN_SDLSL_ORASSIGN                       11
#define TOKEN_SDLSL_XORASSIGN                      12
#define TOKEN_SDLSL_QUESTION                       13
#define TOKEN_SDLSL_OROR                           14
#define TOKEN_SDLSL_ANDAND                         15
#define TOKEN_SDLSL_OR                             16
#define TOKEN_SDLSL_XOR                            17
#define TOKEN_SDLSL_AND                            18
#define TOKEN_SDLSL_EQL                            19
#define TOKEN_SDLSL_NEQ                            20
#define TOKEN_SDLSL_LT                             21
#define TOKEN_SDLSL_LEQ                            22
#define TOKEN_SDLSL_GT                             23
#define TOKEN_SDLSL_GEQ                            24
#define TOKEN_SDLSL_LSHIFT                         25
#define TOKEN_SDLSL_RSHIFT                         26
#define TOKEN_SDLSL_PLUS                           27
#define TOKEN_SDLSL_MINUS                          28
#define TOKEN_SDLSL_STAR                           29
#define TOKEN_SDLSL_SLASH                          30
#define TOKEN_SDLSL_PERCENT                        31
#define TOKEN_SDLSL_TYPECAST                       32
#define TOKEN_SDLSL_EXCLAMATION                    33
#define TOKEN_SDLSL_COMPLEMENT                     34
#define TOKEN_SDLSL_MINUSMINUS                     35
#define TOKEN_SDLSL_PLUSPLUS                       36
#define TOKEN_SDLSL_DOT                            37
#define TOKEN_SDLSL_LBRACKET                       38
#define TOKEN_SDLSL_RBRACKET                       39
#define TOKEN_SDLSL_LPAREN                         40
#define TOKEN_SDLSL_RPAREN                         41
#define TOKEN_SDLSL_ELSE                           42
#define TOKEN_SDLSL_AT                             43
#define TOKEN_SDLSL_IDENTIFIER                     44
#define TOKEN_SDLSL_INT_CONSTANT                   45
#define TOKEN_SDLSL_STRUCT                         46
#define TOKEN_SDLSL_LBRACE                         47
#define TOKEN_SDLSL_RBRACE                         48
#define TOKEN_SDLSL_SEMICOLON                      49
#define TOKEN_SDLSL_FUNCTION                       50
#define TOKEN_SDLSL_VOID                           51
#define TOKEN_SDLSL_BREAK                          52
#define TOKEN_SDLSL_CONTINUE                       53
#define TOKEN_SDLSL_DISCARD                        54
#define TOKEN_SDLSL_DO                             55
#define TOKEN_SDLSL_WHILE                          56
#define TOKEN_SDLSL_FOR                            57
#define TOKEN_SDLSL_IF                             58
#define TOKEN_SDLSL_SWITCH                         59
#define TOKEN_SDLSL_RETURN                         60
#define TOKEN_SDLSL_CASE                           61
#define TOKEN_SDLSL_COLON                          62
#define TOKEN_SDLSL_DEFAULT                        63
#define TOKEN_SDLSL_VAR                            64
#define TOKEN_SDLSL_FLOAT_CONSTANT                 65
#define TOKEN_SDLSL_TRUE                           66
#define TOKEN_SDLSL_FALSE                          67
/**************** End token definitions ***************************************/

/* The next sections is a series of control #defines.
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used to store the integer codes
**                       that represent terminal and non-terminal symbols.
**                       "unsigned char" is used if there are fewer than
**                       256 symbols.  Larger types otherwise.
**    YYNOCODE           is a number of type YYCODETYPE that is not used for
**                       any terminal or nonterminal symbol.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       (also known as: "terminal symbols") have fall-back
**                       values which should be used if the original symbol
**                       would not parse.  This permits keywords to sometimes
**                       be used as identifiers, for example.
**    YYACTIONTYPE       is the data type used for "action codes" - numbers
**                       that indicate what to do in response to the next
**                       token.
**    ParseSDLSLTOKENTYPE     is the data type used for minor type for terminal
**                       symbols.  Background: A "minor type" is a semantic
**                       value associated with a terminal or non-terminal
**                       symbols.  For example, for an "ID" terminal symbol,
**                       the minor type might be the name of the identifier.
**                       Each non-terminal can have a different minor type.
**                       Terminal symbols all have the same minor type, though.
**                       This macros defines the minor type for terminal 
**                       symbols.
**    YYMINORTYPE        is the data type used for all minor types.
**                       This is typically a union of many types, one of
**                       which is ParseSDLSLTOKENTYPE.  The entry in the union
**                       for terminal symbols is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseSDLSLARG_SDECL     A static variable declaration for the %extra_argument
**    ParseSDLSLARG_PDECL     A parameter declaration for the %extra_argument
**    ParseSDLSLARG_PARAM     Code to pass %extra_argument as a subroutine parameter
**    ParseSDLSLARG_STORE     Code to store %extra_argument into yypParser
**    ParseSDLSLARG_FETCH     Code to extract %extra_argument from yypParser
**    ParseSDLSLCTX_*         As ParseSDLSLARG_ except for %extra_context
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYNTOKEN           Number of terminal symbols
**    YY_MAX_SHIFT       Maximum value for shift actions
**    YY_MIN_SHIFTREDUCE Minimum value for shift-reduce actions
**    YY_MAX_SHIFTREDUCE Maximum value for shift-reduce actions
**    YY_ERROR_ACTION    The yy_action[] code for syntax error
**    YY_ACCEPT_ACTION   The yy_action[] code for accept
**    YY_NO_ACTION       The yy_action[] code for no-op
**    YY_MIN_REDUCE      Minimum value for reduce actions
**    YY_MAX_REDUCE      Maximum value for reduce actions
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/************* Begin control #defines *****************************************/
#define YYCODETYPE unsigned char
#define YYNOCODE 98
#define YYACTIONTYPE unsigned short int
#define ParseSDLSLTOKENTYPE  TokenData 
typedef union {
  int yyinit;
  ParseSDLSLTOKENTYPE yy0;
  SDL_SHADER_AstStatementBlock * yy3;
  SDL_SHADER_AstStructDeclaration * yy6;
  SDL_SHADER_AstTranslationUnits * yy33;
  SDL_SHADER_AstStatement * yy36;
  SDL_SHADER_AstAtAttribute * yy44;
  SDL_SHADER_AstVarDeclaration * yy50;
  SDL_SHADER_AstAssignments * yy63;
  SDL_SHADER_AstSwitchCases * yy64;
  SDL_SHADER_AstNodeType yy65;
  SDL_SHADER_AstFunction * yy81;
  SDL_SHADER_AstArguments * yy93;
  SDL_SHADER_AstShader * yy94;
  SDL_SHADER_AstStructMembers * yy95;
  SDL_SHADER_AstSwitchCase * yy97;
  SDL_SHADER_AstStructMember * yy120;
  SDL_SHADER_AstFunctionParams * yy137;
  SDL_SHADER_AstTranslationUnit * yy142;
  SDL_SHADER_AstExpression * yy167;
  const char * yy168;
  SDL_SHADER_AstFunctionParam * yy178;
  SDL_SHADER_AstForDetails * yy184;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseSDLSLARG_SDECL  Context *ctx ;
#define ParseSDLSLARG_PDECL , Context *ctx 
#define ParseSDLSLARG_PARAM ,ctx 
#define ParseSDLSLARG_FETCH  Context *ctx =yypParser->ctx ;
#define ParseSDLSLARG_STORE yypParser->ctx =ctx ;
#define ParseSDLSLCTX_SDECL
#define ParseSDLSLCTX_PDECL
#define ParseSDLSLCTX_PARAM
#define ParseSDLSLCTX_FETCH
#define ParseSDLSLCTX_STORE
#define YYNSTATE             152
#define YYNRULE              121
#define YYNRULE_WITH_ACTION  121
#define YYNTOKEN             68
#define YY_MAX_SHIFT         151
#define YY_MIN_SHIFTREDUCE   232
#define YY_MAX_SHIFTREDUCE   352
#define YY_ERROR_ACTION      353
#define YY_ACCEPT_ACTION     354
#define YY_NO_ACTION         355
#define YY_MIN_REDUCE        356
#define YY_MAX_REDUCE        476
/************* End control #defines *******************************************/
#define YY_NLOOKAHEAD ((int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])))

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N <= YY_MAX_SHIFT             Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   N between YY_MIN_SHIFTREDUCE       Shift to an arbitrary state then
**     and YY_MAX_SHIFTREDUCE           reduce by rule N-YY_MIN_SHIFTREDUCE.
**
**   N == YY_ERROR_ACTION               A syntax error has occurred.
**
**   N == YY_ACCEPT_ACTION              The parser accepts its input.
**
**   N == YY_NO_ACTION                  No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
**   N between YY_MIN_REDUCE            Reduce by rule N-YY_MIN_REDUCE
**     and YY_MAX_REDUCE
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as either:
**
**    (A)   N = yy_action[ yy_shift_ofst[S] + X ]
**    (B)   N = yy_default[S]
**
** The (A) formula is preferred.  The B formula is used instead if
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X.
**
** The formulas above are for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
**
*********** Begin parsing tables **********************************************/
#define YY_ACTTAB_COUNT (936)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   107,  377,  280,  283,  284,  285,  286,  287,  288,  289,
 /*    10 */   290,  291,  292,   34,   35,   36,   37,   38,   39,   41,
 /*    20 */    40,   45,   43,   44,   42,   48,   46,   52,   50,   58,
 /*    30 */    56,   54,  356,   53,   51,  296,  295,  141,   32,   47,
 /*    40 */    49,   23,   24,  358,  359,  360,   55,   60,  147,   25,
 /*    50 */    67,  322,    1,    1,  257,  261,  148,  433,  139,  138,
 /*    60 */   137,    9,  132,  131,  129,  127,   21,   71,   53,   51,
 /*    70 */   120,  323,  324,  325,   47,   49,   23,   24,  151,  151,
 /*    80 */   249,   55,   62,   62,   73,   67,  322,  248,    1,  258,
 /*    90 */   261,   83,   87,  139,  138,  137,    9,  132,  131,  129,
 /*   100 */   127,   21,   84,   53,   51,  120,  323,  324,  325,   47,
 /*   110 */    49,   23,   24,  113,  250,   85,   55,  114,   64,  364,
 /*   120 */    67,  322,  148,    1,  115,  261,  149,   86,  139,  138,
 /*   130 */   137,    9,  132,  131,  129,  127,   21,  141,   32,   72,
 /*   140 */   120,  323,  324,  325,   34,   35,   36,   37,   38,   39,
 /*   150 */    41,   40,   45,   43,   44,   42,   48,   46,   52,   50,
 /*   160 */    58,   56,   54,   52,   50,   58,   56,   54,  141,   32,
 /*   170 */    27,  281,  117,  141,   32,  354,   13,  357,  359,  360,
 /*   180 */    12,   74,   34,   35,   36,   37,   38,   39,   41,   40,
 /*   190 */    45,   43,   44,   42,   48,   46,   52,   50,   58,   56,
 /*   200 */    54,   75,   76,   77,   78,   79,  141,   32,   34,   35,
 /*   210 */    36,   37,   38,   39,   41,   40,   45,   43,   44,   42,
 /*   220 */    48,   46,   52,   50,   58,   56,   54,   66,   19,   57,
 /*   230 */    88,  402,  141,   32,    2,  383,  136,   80,   90,  125,
 /*   240 */   124,  123,  122,   26,  273,  434,   34,   35,   36,   37,
 /*   250 */    38,   39,   41,   40,   45,   43,   44,   42,   48,   46,
 /*   260 */    52,   50,   58,   56,   54,   91,   92,  252,   93,  318,
 /*   270 */   141,   32,   34,   35,   36,   37,   38,   39,   41,   40,
 /*   280 */    45,   43,   44,   42,   48,   46,   52,   50,   58,   56,
 /*   290 */    54,   94,   68,  147,   95,    4,  141,   32,  370,  244,
 /*   300 */   126,   34,   35,   36,   37,   38,   39,   41,   40,   45,
 /*   310 */    43,   44,   42,   48,   46,   52,   50,   58,   56,   54,
 /*   320 */    96,   97,  143,   98,   99,  141,   32,  100,  102,    6,
 /*   330 */    34,   35,   36,   37,   38,   39,   41,   40,   45,   43,
 /*   340 */    44,   42,   48,   46,   52,   50,   58,   56,   54,  111,
 /*   350 */   101,  112,  104,  105,  141,   32,  103,  106,    8,   34,
 /*   360 */    35,   36,   37,   38,   39,   41,   40,   45,   43,   44,
 /*   370 */    42,   48,   46,   52,   50,   58,   56,   54,  110,   81,
 /*   380 */   109,   89,  108,  141,   32,   82,  142,  133,   34,   35,
 /*   390 */    36,   37,   38,   39,   41,   40,   45,   43,   44,   42,
 /*   400 */    48,   46,   52,   50,   58,   56,   54,  140,  365,  147,
 /*   410 */   380,  114,  141,   32,  351,   34,   35,   36,   37,   38,
 /*   420 */    39,   41,   40,   45,   43,   44,   42,   48,   46,   52,
 /*   430 */    50,   58,   56,   54,  378,   14,  121,    1,  371,  141,
 /*   440 */    32,   34,   35,   36,   37,   38,   39,   41,   40,   45,
 /*   450 */    43,   44,   42,   48,   46,   52,   50,   58,   56,   54,
 /*   460 */    15,   17,  451,   65,   33,  141,   32,  251,    3,  326,
 /*   470 */    34,   35,   36,   37,   38,   39,   41,   40,   45,   43,
 /*   480 */    44,   42,   48,   46,   52,   50,   58,   56,   54,   20,
 /*   490 */    22,  118,  119,  421,  141,   32,   63,   34,   35,   36,
 /*   500 */    37,   38,   39,   41,   40,   45,   43,   44,   42,   48,
 /*   510 */    46,   52,   50,   58,   56,   54,  277,  276,  275,  274,
 /*   520 */    16,  141,   32,   36,   37,   38,   39,   41,   40,   45,
 /*   530 */    43,   44,   42,   48,   46,   52,   50,   58,   56,   54,
 /*   540 */    28,    5,   29,  266,    7,  141,   32,   37,   38,   39,
 /*   550 */    41,   40,   45,   43,   44,   42,   48,   46,   52,   50,
 /*   560 */    58,   56,   54,   10,   30,   31,  134,  265,  141,   32,
 /*   570 */    38,   39,   41,   40,   45,   43,   44,   42,   48,   46,
 /*   580 */    52,   50,   58,   56,   54,  264,  263,  262,   69,  352,
 /*   590 */   141,   32,   39,   41,   40,   45,   43,   44,   42,   48,
 /*   600 */    46,   52,   50,   58,   56,   54,  245,  243,  238,  144,
 /*   610 */   145,  141,   32,   41,   40,   45,   43,   44,   42,   48,
 /*   620 */    46,   52,   50,   58,   56,   54,  271,   53,   51,  146,
 /*   630 */    61,  141,   32,   47,   49,   23,   24,  239,   18,   27,
 /*   640 */    55,  117,  150,  355,   70,  322,   45,   43,   44,   42,
 /*   650 */    48,   46,   52,   50,   58,   56,   54,  355,  355,  355,
 /*   660 */   355,  355,  141,   32,  120,  323,  324,  325,   53,   51,
 /*   670 */   355,  355,  355,   59,   47,   49,   23,   24,  147,  355,
 /*   680 */   355,   55,   53,   51,  242,   70,  322,  355,   47,   49,
 /*   690 */   355,  355,  355,  355,  355,   55,  317,   53,   51,   70,
 /*   700 */   322,  355,  355,   47,   49,  355,  323,  324,  325,  355,
 /*   710 */    55,   53,   51,  355,   70,  322,  355,   47,   49,   11,
 /*   720 */   323,  324,  325,  355,   55,   53,   51,  355,   70,  322,
 /*   730 */   355,   47,   49,  272,  355,  323,  324,  325,   55,  355,
 /*   740 */   355,  355,   70,  322,  355,   19,  355,  355,  402,  323,
 /*   750 */   324,  325,  384,  136,  355,  355,  125,  124,  123,  122,
 /*   760 */    26,  355,  355,  323,  324,  325,   19,  355,  355,  402,
 /*   770 */   355,  355,  355,  437,  136,  355,  355,  125,  124,  123,
 /*   780 */   122,   26,  355,   19,  355,  355,  402,  355,  355,  355,
 /*   790 */   435,  136,  355,  355,  125,  124,  123,  122,   26,   19,
 /*   800 */   355,  355,  402,  355,  355,  355,  394,  136,  355,  355,
 /*   810 */   125,  124,  123,  122,   26,   19,  355,  355,  402,  355,
 /*   820 */   355,  355,  128,  136,  355,  355,  125,  124,  123,  122,
 /*   830 */    26,  355,  355,   19,  355,  355,  402,  355,  355,  355,
 /*   840 */   392,  136,  355,  355,  125,  124,  123,  122,   26,  355,
 /*   850 */    19,  355,  355,  402,  355,  355,  355,  391,  136,  355,
 /*   860 */   355,  125,  124,  123,  122,   26,  355,   19,  355,  355,
 /*   870 */   402,  355,  355,  355,  135,  136,  355,  355,  125,  124,
 /*   880 */   123,  122,   26,   48,   46,   52,   50,   58,   56,   54,
 /*   890 */    19,  355,  355,  355,  355,  141,   32,  355,  424,  130,
 /*   900 */    19,  425,  426,  427,  355,   26,  355,  355,  116,  355,
 /*   910 */    19,  429,  430,  431,  355,   26,  355,  355,  355,  423,
 /*   920 */   355,  429,  430,  431,  355,   26,   58,   56,   54,  422,
 /*   930 */   355,  355,  355,  355,  141,   32,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    80,   81,    2,    3,    4,    5,    6,    7,    8,    9,
 /*    10 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*    20 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*    30 */    30,   31,    0,   27,   28,   35,   36,   37,   38,   33,
 /*    40 */    34,   35,   36,   70,   71,   72,   40,   86,   43,   92,
 /*    50 */    44,   45,   47,   47,   48,   49,   44,   96,   52,   53,
 /*    60 */    54,   55,   56,   57,   58,   59,   60,   76,   27,   28,
 /*    70 */    64,   65,   66,   67,   33,   34,   35,   36,   46,   46,
 /*    80 */    44,   40,   50,   50,   76,   44,   45,   51,   47,   48,
 /*    90 */    49,   76,   76,   52,   53,   54,   55,   56,   57,   58,
 /*   100 */    59,   60,   76,   27,   28,   64,   65,   66,   67,   33,
 /*   110 */    34,   35,   36,   97,   41,   76,   40,   44,   74,   75,
 /*   120 */    44,   45,   44,   47,   51,   49,   48,   76,   52,   53,
 /*   130 */    54,   55,   56,   57,   58,   59,   60,   37,   38,   76,
 /*   140 */    64,   65,   66,   67,   13,   14,   15,   16,   17,   18,
 /*   150 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   160 */    29,   30,   31,   27,   28,   29,   30,   31,   37,   38,
 /*   170 */    61,    2,   63,   37,   38,   68,   69,   70,   71,   72,
 /*   180 */    49,   76,   13,   14,   15,   16,   17,   18,   19,   20,
 /*   190 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   200 */    31,   76,   76,   76,   76,   76,   37,   38,   13,   14,
 /*   210 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*   220 */    25,   26,   27,   28,   29,   30,   31,    1,   76,    1,
 /*   230 */    76,   79,   37,   38,   82,   83,   84,   76,   76,   87,
 /*   240 */    88,   89,   90,   91,   49,   96,   13,   14,   15,   16,
 /*   250 */    17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   260 */    27,   28,   29,   30,   31,   76,   76,   41,   76,   41,
 /*   270 */    37,   38,   13,   14,   15,   16,   17,   18,   19,   20,
 /*   280 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   290 */    31,   76,   73,   43,   76,   62,   37,   38,   79,   49,
 /*   300 */    41,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*   310 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   320 */    76,   76,   73,   76,   76,   37,   38,   76,   76,   41,
 /*   330 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*   340 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   76,
 /*   350 */    76,   76,   76,   76,   37,   38,   76,   76,   41,   13,
 /*   360 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*   370 */    24,   25,   26,   27,   28,   29,   30,   31,   76,   76,
 /*   380 */    76,   76,   76,   37,   38,   76,   73,   41,   13,   14,
 /*   390 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*   400 */    25,   26,   27,   28,   29,   30,   31,   77,   75,   43,
 /*   410 */    73,   44,   37,   38,   39,   13,   14,   15,   16,   17,
 /*   420 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   430 */    28,   29,   30,   31,   81,   40,   93,   47,   79,   37,
 /*   440 */    38,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*   450 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   460 */    40,   78,   93,   44,   62,   37,   38,   41,   62,   41,
 /*   470 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*   480 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   49,
 /*   490 */     2,   44,   44,   49,   37,   38,   39,   13,   14,   15,
 /*   500 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
 /*   510 */    26,   27,   28,   29,   30,   31,   49,   49,   49,   49,
 /*   520 */    47,   37,   38,   15,   16,   17,   18,   19,   20,   21,
 /*   530 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   540 */    40,   42,   40,   49,   41,   37,   38,   16,   17,   18,
 /*   550 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   560 */    29,   30,   31,   40,   40,   40,   56,   49,   37,   38,
 /*   570 */    17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   580 */    27,   28,   29,   30,   31,   49,   49,   49,   44,   44,
 /*   590 */    37,   38,   18,   19,   20,   21,   22,   23,   24,   25,
 /*   600 */    26,   27,   28,   29,   30,   31,   49,   49,   41,   45,
 /*   610 */    40,   37,   38,   19,   20,   21,   22,   23,   24,   25,
 /*   620 */    26,   27,   28,   29,   30,   31,   48,   27,   28,   44,
 /*   630 */    44,   37,   38,   33,   34,   35,   36,   49,   47,   61,
 /*   640 */    40,   63,   44,   98,   44,   45,   21,   22,   23,   24,
 /*   650 */    25,   26,   27,   28,   29,   30,   31,   98,   98,   98,
 /*   660 */    98,   98,   37,   38,   64,   65,   66,   67,   27,   28,
 /*   670 */    98,   98,   98,   38,   33,   34,   35,   36,   43,   98,
 /*   680 */    98,   40,   27,   28,   49,   44,   45,   98,   33,   34,
 /*   690 */    98,   98,   98,   98,   98,   40,   41,   27,   28,   44,
 /*   700 */    45,   98,   98,   33,   34,   98,   65,   66,   67,   98,
 /*   710 */    40,   27,   28,   98,   44,   45,   98,   33,   34,   49,
 /*   720 */    65,   66,   67,   98,   40,   27,   28,   98,   44,   45,
 /*   730 */    98,   33,   34,   49,   98,   65,   66,   67,   40,   98,
 /*   740 */    98,   98,   44,   45,   98,   76,   98,   98,   79,   65,
 /*   750 */    66,   67,   83,   84,   98,   98,   87,   88,   89,   90,
 /*   760 */    91,   98,   98,   65,   66,   67,   76,   98,   98,   79,
 /*   770 */    98,   98,   98,   83,   84,   98,   98,   87,   88,   89,
 /*   780 */    90,   91,   98,   76,   98,   98,   79,   98,   98,   98,
 /*   790 */    83,   84,   98,   98,   87,   88,   89,   90,   91,   76,
 /*   800 */    98,   98,   79,   98,   98,   98,   83,   84,   98,   98,
 /*   810 */    87,   88,   89,   90,   91,   76,   98,   98,   79,   98,
 /*   820 */    98,   98,   83,   84,   98,   98,   87,   88,   89,   90,
 /*   830 */    91,   98,   98,   76,   98,   98,   79,   98,   98,   98,
 /*   840 */    83,   84,   98,   98,   87,   88,   89,   90,   91,   98,
 /*   850 */    76,   98,   98,   79,   98,   98,   98,   83,   84,   98,
 /*   860 */    98,   87,   88,   89,   90,   91,   98,   76,   98,   98,
 /*   870 */    79,   98,   98,   98,   83,   84,   98,   98,   87,   88,
 /*   880 */    89,   90,   91,   25,   26,   27,   28,   29,   30,   31,
 /*   890 */    76,   98,   98,   98,   98,   37,   38,   98,   84,   85,
 /*   900 */    76,   87,   88,   89,   98,   91,   98,   98,   94,   98,
 /*   910 */    76,   87,   88,   89,   98,   91,   98,   98,   98,   95,
 /*   920 */    98,   87,   88,   89,   98,   91,   29,   30,   31,   95,
 /*   930 */    98,   98,   98,   98,   37,   38,   98,   98,   98,   98,
 /*   940 */    98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
 /*   950 */    98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
 /*   960 */    98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
 /*   970 */    98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
 /*   980 */    98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
 /*   990 */    98,   98,   98,   98,   98,   68,   68,   68,   68,   68,
 /*  1000 */    68,   68,   68,   68,
};
#define YY_SHIFT_COUNT    (151)
#define YY_SHIFT_MIN      (0)
#define YY_SHIFT_MAX      (897)
static const unsigned short int yy_shift_ofst[] = {
 /*     0 */    33,    6,   41,   76,   76,   76,   76,   76,   76,   76,
 /*    10 */   600,  641,  641,   32,  655,   73,  109,    5,   12,    0,
 /*    20 */   670,  684,  698,  698,  698,  698,  698,  698,  698,  698,
 /*    30 */   698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
 /*    40 */   698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
 /*    50 */   698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
 /*    60 */   578,  635,   36,  250,   78,  366,  367,  395,  390,  420,
 /*    70 */   395,  131,  169,  195,  233,  259,  288,  317,  346,  375,
 /*    80 */   402,  428,  457,  484,  484,  484,  484,  484,  484,  484,
 /*    90 */   508,  531,  553,  574,  594,  625,  625,  858,  858,  858,
 /*   100 */   858,  136,  136,  897,  897,  897,  897,  226,  100,  100,
 /*   110 */   100,  100,  100,  228,  419,  426,  440,  406,  488,  447,
 /*   120 */   448,  444,  467,  468,  469,  470,  473,  500,  499,  502,
 /*   130 */   503,  523,  524,  494,  525,  510,  518,  536,  537,  538,
 /*   140 */   544,  545,  557,  558,  567,  564,  570,  585,  586,  588,
 /*   150 */   591,  598,
};
#define YY_REDUCE_COUNT (70)
#define YY_REDUCE_MIN   (-80)
#define YY_REDUCE_MAX   (834)
static const short yy_reduce_ofst[] = {
 /*     0 */   107,  152,  669,  690,  707,  723,  739,  757,  774,  791,
 /*    10 */   814,  824,  834,  -27,   16,  -80,  -39,  219,   44,  -43,
 /*    20 */    -9,    8,   15,   26,   39,   51,   63,  105,  125,  126,
 /*    30 */   127,  128,  129,  154,  161,  162,  189,  190,  192,  215,
 /*    40 */   218,  244,  245,  247,  248,  251,  252,  273,  274,  275,
 /*    50 */   276,  277,  280,  281,  302,  303,  304,  305,  306,  309,
 /*    60 */   149,  249,  330,  313,  333,  337,  353,  343,  359,  383,
 /*    70 */   369,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   353,  353,  353,  438,  436,  353,  353,  353,  353,  353,
 /*    10 */   428,  432,  432,  353,  353,  353,  353,  353,  353,  353,
 /*    20 */   353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
 /*    30 */   353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
 /*    40 */   353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
 /*    50 */   353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
 /*    60 */   353,  353,  353,  353,  353,  379,  353,  445,  353,  353,
 /*    70 */   445,  353,  403,  353,  353,  353,  353,  353,  353,  353,
 /*    80 */   353,  353,  353,  440,  418,  417,  406,  443,  474,  444,
 /*    90 */   473,  472,  471,  470,  469,  468,  467,  466,  465,  464,
 /*   100 */   463,  461,  462,  459,  460,  453,  452,  353,  456,  457,
 /*   110 */   458,  455,  454,  353,  353,  353,  353,  353,  439,  353,
 /*   120 */   353,  451,  353,  353,  353,  353,  353,  353,  393,  353,
 /*   130 */   353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
 /*   140 */   353,  353,  353,  353,  353,  353,  361,  353,  353,  353,
 /*   150 */   353,  353,
};
/********** End of lemon-generated parsing tables *****************************/

/* The next table maps tokens (terminal symbols) into fallback tokens.  
** If a construct like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
**
** This feature can be used, for example, to cause some keywords in a language
** to revert to identifiers if they keyword does not apply in the context where
** it appears.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
**
** After the "shift" half of a SHIFTREDUCE action, the stateno field
** actually contains the reduce action for the second half of the
** SHIFTREDUCE.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  yyStackEntry *yytos;          /* Pointer to top element of the stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyhwm;                    /* High-water mark of the stack */
#endif
#ifndef YYNOERRORRECOVERY
  int yyerrcnt;                 /* Shifts left before out of the error */
#endif
  ParseSDLSLARG_SDECL                /* A place to hold %extra_argument */
  ParseSDLSLCTX_SDECL                /* A place to hold %extra_context */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
  yyStackEntry yystk0;          /* First stack entry */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
  yyStackEntry *yystackEnd;            /* Last entry in the stack */
#endif
};
typedef struct yyParser yyParser;

#include <assert.h>
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
#if __SDL_SHADER__
static
#endif
void ParseSDLSLTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#if defined(YYCOVERAGE) || LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  /*    0 */ "$",
  /*    1 */ "COMMA",
  /*    2 */ "ASSIGN",
  /*    3 */ "PLUSASSIGN",
  /*    4 */ "MINUSASSIGN",
  /*    5 */ "STARASSIGN",
  /*    6 */ "SLASHASSIGN",
  /*    7 */ "PERCENTASSIGN",
  /*    8 */ "LSHIFTASSIGN",
  /*    9 */ "RSHIFTASSIGN",
  /*   10 */ "ANDASSIGN",
  /*   11 */ "ORASSIGN",
  /*   12 */ "XORASSIGN",
  /*   13 */ "QUESTION",
  /*   14 */ "OROR",
  /*   15 */ "ANDAND",
  /*   16 */ "OR",
  /*   17 */ "XOR",
  /*   18 */ "AND",
  /*   19 */ "EQL",
  /*   20 */ "NEQ",
  /*   21 */ "LT",
  /*   22 */ "LEQ",
  /*   23 */ "GT",
  /*   24 */ "GEQ",
  /*   25 */ "LSHIFT",
  /*   26 */ "RSHIFT",
  /*   27 */ "PLUS",
  /*   28 */ "MINUS",
  /*   29 */ "STAR",
  /*   30 */ "SLASH",
  /*   31 */ "PERCENT",
  /*   32 */ "TYPECAST",
  /*   33 */ "EXCLAMATION",
  /*   34 */ "COMPLEMENT",
  /*   35 */ "MINUSMINUS",
  /*   36 */ "PLUSPLUS",
  /*   37 */ "DOT",
  /*   38 */ "LBRACKET",
  /*   39 */ "RBRACKET",
  /*   40 */ "LPAREN",
  /*   41 */ "RPAREN",
  /*   42 */ "ELSE",
  /*   43 */ "AT",
  /*   44 */ "IDENTIFIER",
  /*   45 */ "INT_CONSTANT",
  /*   46 */ "STRUCT",
  /*   47 */ "LBRACE",
  /*   48 */ "RBRACE",
  /*   49 */ "SEMICOLON",
  /*   50 */ "FUNCTION",
  /*   51 */ "VOID",
  /*   52 */ "BREAK",
  /*   53 */ "CONTINUE",
  /*   54 */ "DISCARD",
  /*   55 */ "DO",
  /*   56 */ "WHILE",
  /*   57 */ "FOR",
  /*   58 */ "IF",
  /*   59 */ "SWITCH",
  /*   60 */ "RETURN",
  /*   61 */ "CASE",
  /*   62 */ "COLON",
  /*   63 */ "DEFAULT",
  /*   64 */ "VAR",
  /*   65 */ "FLOAT_CONSTANT",
  /*   66 */ "TRUE",
  /*   67 */ "FALSE",
  /*   68 */ "shader",
  /*   69 */ "translation_unit_list",
  /*   70 */ "translation_unit",
  /*   71 */ "struct_declaration",
  /*   72 */ "function",
  /*   73 */ "at_attrib",
  /*   74 */ "struct_member_list",
  /*   75 */ "struct_member",
  /*   76 */ "expression",
  /*   77 */ "return_type",
  /*   78 */ "function_params",
  /*   79 */ "statement_block",
  /*   80 */ "function_param_list",
  /*   81 */ "function_param",
  /*   82 */ "statement_list",
  /*   83 */ "statement",
  /*   84 */ "var_declaration",
  /*   85 */ "for_details",
  /*   86 */ "switch_case_list",
  /*   87 */ "assignment_statement",
  /*   88 */ "compound_assignment_statement",
  /*   89 */ "increment_statement",
  /*   90 */ "function_call_statement",
  /*   91 */ "assignment_statement_list",
  /*   92 */ "compound_assignment_operator",
  /*   93 */ "arguments",
  /*   94 */ "for_initializer",
  /*   95 */ "for_step",
  /*   96 */ "switch_case",
  /*   97 */ "argument_list",
};
#endif /* defined(YYCOVERAGE) || !defined(NDEBUG) */

#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "shader ::= translation_unit_list",
 /*   1 */ "translation_unit_list ::= translation_unit",
 /*   2 */ "translation_unit_list ::= translation_unit_list translation_unit",
 /*   3 */ "translation_unit ::= struct_declaration",
 /*   4 */ "translation_unit ::= function",
 /*   5 */ "at_attrib ::= AT IDENTIFIER",
 /*   6 */ "at_attrib ::= AT IDENTIFIER LPAREN INT_CONSTANT RPAREN",
 /*   7 */ "struct_declaration ::= STRUCT IDENTIFIER LBRACE struct_member_list RBRACE SEMICOLON",
 /*   8 */ "struct_member_list ::= struct_member",
 /*   9 */ "struct_member_list ::= struct_member_list struct_member",
 /*  10 */ "struct_member ::= IDENTIFIER IDENTIFIER SEMICOLON",
 /*  11 */ "struct_member ::= IDENTIFIER IDENTIFIER at_attrib SEMICOLON",
 /*  12 */ "struct_member ::= IDENTIFIER IDENTIFIER LBRACKET expression RBRACKET SEMICOLON",
 /*  13 */ "struct_member ::= IDENTIFIER IDENTIFIER LBRACKET expression RBRACKET at_attrib SEMICOLON",
 /*  14 */ "function ::= FUNCTION return_type IDENTIFIER function_params statement_block",
 /*  15 */ "function ::= FUNCTION return_type IDENTIFIER function_params at_attrib statement_block",
 /*  16 */ "return_type ::= VOID",
 /*  17 */ "return_type ::= IDENTIFIER",
 /*  18 */ "function_params ::= LPAREN RPAREN",
 /*  19 */ "function_params ::= LPAREN VOID RPAREN",
 /*  20 */ "function_params ::= LPAREN function_param_list RPAREN",
 /*  21 */ "function_param_list ::= function_param",
 /*  22 */ "function_param_list ::= function_param_list COMMA function_param",
 /*  23 */ "function_param ::= IDENTIFIER IDENTIFIER",
 /*  24 */ "function_param ::= IDENTIFIER IDENTIFIER at_attrib",
 /*  25 */ "statement_block ::= LBRACE RBRACE",
 /*  26 */ "statement_block ::= LBRACE statement_list RBRACE",
 /*  27 */ "statement_list ::= statement",
 /*  28 */ "statement_list ::= statement_list statement",
 /*  29 */ "statement ::= SEMICOLON",
 /*  30 */ "statement ::= BREAK SEMICOLON",
 /*  31 */ "statement ::= CONTINUE SEMICOLON",
 /*  32 */ "statement ::= DISCARD SEMICOLON",
 /*  33 */ "statement ::= var_declaration SEMICOLON",
 /*  34 */ "statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON",
 /*  35 */ "statement ::= WHILE LPAREN expression RPAREN statement",
 /*  36 */ "statement ::= FOR LPAREN for_details RPAREN statement",
 /*  37 */ "statement ::= IF LPAREN expression RPAREN statement",
 /*  38 */ "statement ::= IF LPAREN expression RPAREN statement ELSE statement",
 /*  39 */ "statement ::= SWITCH LPAREN expression RPAREN LBRACE switch_case_list RBRACE",
 /*  40 */ "statement ::= RETURN SEMICOLON",
 /*  41 */ "statement ::= RETURN expression SEMICOLON",
 /*  42 */ "statement ::= assignment_statement SEMICOLON",
 /*  43 */ "statement ::= compound_assignment_statement SEMICOLON",
 /*  44 */ "statement ::= increment_statement SEMICOLON",
 /*  45 */ "statement ::= function_call_statement SEMICOLON",
 /*  46 */ "statement ::= statement_block",
 /*  47 */ "assignment_statement ::= assignment_statement_list expression",
 /*  48 */ "assignment_statement_list ::= expression ASSIGN",
 /*  49 */ "assignment_statement_list ::= assignment_statement_list expression ASSIGN",
 /*  50 */ "compound_assignment_statement ::= expression compound_assignment_operator expression",
 /*  51 */ "compound_assignment_operator ::= PLUSASSIGN",
 /*  52 */ "compound_assignment_operator ::= MINUSASSIGN",
 /*  53 */ "compound_assignment_operator ::= STARASSIGN",
 /*  54 */ "compound_assignment_operator ::= SLASHASSIGN",
 /*  55 */ "compound_assignment_operator ::= PERCENTASSIGN",
 /*  56 */ "compound_assignment_operator ::= LSHIFTASSIGN",
 /*  57 */ "compound_assignment_operator ::= RSHIFTASSIGN",
 /*  58 */ "compound_assignment_operator ::= ANDASSIGN",
 /*  59 */ "compound_assignment_operator ::= ORASSIGN",
 /*  60 */ "compound_assignment_operator ::= XORASSIGN",
 /*  61 */ "increment_statement ::= PLUSPLUS expression",
 /*  62 */ "increment_statement ::= MINUSMINUS expression",
 /*  63 */ "increment_statement ::= expression PLUSPLUS",
 /*  64 */ "increment_statement ::= expression MINUSMINUS",
 /*  65 */ "function_call_statement ::= IDENTIFIER arguments",
 /*  66 */ "for_details ::= for_initializer SEMICOLON expression SEMICOLON for_step",
 /*  67 */ "for_details ::= for_initializer SEMICOLON SEMICOLON for_step",
 /*  68 */ "for_initializer ::= var_declaration",
 /*  69 */ "for_initializer ::= assignment_statement",
 /*  70 */ "for_initializer ::= compound_assignment_statement",
 /*  71 */ "for_initializer ::= increment_statement",
 /*  72 */ "for_initializer ::=",
 /*  73 */ "for_step ::= assignment_statement",
 /*  74 */ "for_step ::= compound_assignment_statement",
 /*  75 */ "for_step ::= increment_statement",
 /*  76 */ "for_step ::=",
 /*  77 */ "switch_case_list ::= switch_case",
 /*  78 */ "switch_case_list ::= switch_case_list switch_case",
 /*  79 */ "switch_case ::= CASE expression COLON statement",
 /*  80 */ "switch_case ::= CASE expression COLON",
 /*  81 */ "switch_case ::= DEFAULT COLON statement",
 /*  82 */ "switch_case ::= DEFAULT COLON",
 /*  83 */ "var_declaration ::= VAR IDENTIFIER IDENTIFIER",
 /*  84 */ "var_declaration ::= VAR IDENTIFIER IDENTIFIER ASSIGN expression",
 /*  85 */ "arguments ::= LPAREN RPAREN",
 /*  86 */ "arguments ::= LPAREN argument_list RPAREN",
 /*  87 */ "argument_list ::= expression",
 /*  88 */ "argument_list ::= argument_list COMMA expression",
 /*  89 */ "expression ::= IDENTIFIER",
 /*  90 */ "expression ::= INT_CONSTANT",
 /*  91 */ "expression ::= FLOAT_CONSTANT",
 /*  92 */ "expression ::= TRUE",
 /*  93 */ "expression ::= FALSE",
 /*  94 */ "expression ::= LPAREN expression RPAREN",
 /*  95 */ "expression ::= IDENTIFIER arguments",
 /*  96 */ "expression ::= PLUS expression",
 /*  97 */ "expression ::= MINUS expression",
 /*  98 */ "expression ::= COMPLEMENT expression",
 /*  99 */ "expression ::= EXCLAMATION expression",
 /* 100 */ "expression ::= expression STAR expression",
 /* 101 */ "expression ::= expression SLASH expression",
 /* 102 */ "expression ::= expression PERCENT expression",
 /* 103 */ "expression ::= expression PLUS expression",
 /* 104 */ "expression ::= expression MINUS expression",
 /* 105 */ "expression ::= expression LSHIFT expression",
 /* 106 */ "expression ::= expression RSHIFT expression",
 /* 107 */ "expression ::= expression LT expression",
 /* 108 */ "expression ::= expression GT expression",
 /* 109 */ "expression ::= expression LEQ expression",
 /* 110 */ "expression ::= expression GEQ expression",
 /* 111 */ "expression ::= expression EQL expression",
 /* 112 */ "expression ::= expression NEQ expression",
 /* 113 */ "expression ::= expression AND expression",
 /* 114 */ "expression ::= expression XOR expression",
 /* 115 */ "expression ::= expression OR expression",
 /* 116 */ "expression ::= expression ANDAND expression",
 /* 117 */ "expression ::= expression OROR expression",
 /* 118 */ "expression ::= expression QUESTION expression COLON expression",
 /* 119 */ "expression ::= expression LBRACKET expression RBRACKET",
 /* 120 */ "expression ::= expression DOT IDENTIFIER",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.  Return the number
** of errors.  Return 0 on success.
*/
static int yyGrowStack(yyParser *p){
  int newSize;
  int idx;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  idx = p->yytos ? (int)(p->yytos - p->yystack) : 0;
  if( p->yystack==&p->yystk0 ){
    pNew = malloc(newSize*sizeof(pNew[0]));
    if( pNew ) pNew[0] = p->yystk0;
  }else{
    pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  }
  if( pNew ){
    p->yystack = pNew;
    p->yytos = &p->yystack[idx];
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows from %d to %d entries.\n",
              yyTracePrompt, p->yystksz, newSize);
    }
#endif
    p->yystksz = newSize;
  }
  return pNew==0; 
}
#endif

/* Datatype of the argument to the memory allocated passed as the
** second argument to ParseSDLSLAlloc() below.  This can be changed by
** putting an appropriate #define in the %include section of the input
** grammar.
*/
#ifndef YYMALLOCARGTYPE
# define YYMALLOCARGTYPE size_t
#endif

/* Initialize a new parser that has already been allocated.
*/
void ParseSDLSLInit(void *yypRawParser ParseSDLSLCTX_PDECL){
  yyParser *yypParser = (yyParser*)yypRawParser;
  ParseSDLSLCTX_STORE
#ifdef YYTRACKMAXSTACKDEPTH
  yypParser->yyhwm = 0;
#endif
#if YYSTACKDEPTH<=0
  yypParser->yytos = NULL;
  yypParser->yystack = NULL;
  yypParser->yystksz = 0;
  if( yyGrowStack(yypParser) ){
    yypParser->yystack = &yypParser->yystk0;
    yypParser->yystksz = 1;
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  yypParser->yytos = yypParser->yystack;
  yypParser->yystack[0].stateno = 0;
  yypParser->yystack[0].major = 0;
#if YYSTACKDEPTH>0
  yypParser->yystackEnd = &yypParser->yystack[YYSTACKDEPTH-1];
#endif
}

#ifndef ParseSDLSL_ENGINEALWAYSONSTACK
/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to ParseSDLSL and ParseSDLSLFree.
*/
#if __SDL_SHADER__
static void *ParseSDLSLAlloc(void *(*mallocProc)(size_t,void *), void *malloc_data ParseSDLSLCTX_PDECL){
  yyParser *yypParser;
  yypParser = (yyParser*)(*mallocProc)( (YYMALLOCARGTYPE)sizeof(yyParser), malloc_data );
  if( yypParser ){
    ParseSDLSLCTX_STORE
    ParseSDLSLInit(yypParser ParseSDLSLCTX_PARAM);
  }
  return (void*)yypParser;
}
#else
void *ParseSDLSLAlloc(void *(*mallocProc)(YYMALLOCARGTYPE) ParseSDLSLCTX_PDECL){
  yyParser *yypParser;
  yypParser = (yyParser*)(*mallocProc)( (YYMALLOCARGTYPE)sizeof(yyParser) );
  if( yypParser ){
    ParseSDLSLCTX_STORE
    ParseSDLSLInit(yypParser ParseSDLSLCTX_PARAM);
  }
  return (void*)yypParser;
}
#endif
#endif /* ParseSDLSL_ENGINEALWAYSONSTACK */


/* The following function deletes the "minor type" or semantic value
** associated with a symbol.  The symbol can be either a terminal
** or nonterminal. "yymajor" is the symbol code, and "yypminor" is
** a pointer to the value to be deleted.  The code used to do the 
** deletions is derived from the %destructor and/or %token_destructor
** directives of the input grammar.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseSDLSLARG_FETCH
  ParseSDLSLCTX_FETCH
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are *not* used
    ** inside the C code.
    */
/********* Begin destructor definitions ***************************************/
    case 68: /* shader */
{
#line 62 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_shader(ctx, (yypminor->yy94)); 
#line 1033 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 69: /* translation_unit_list */
{
#line 66 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_translation_units(ctx, (yypminor->yy33)); 
#line 1040 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 70: /* translation_unit */
{
#line 73 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_translation_unit(ctx, (yypminor->yy142)); 
#line 1047 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 71: /* struct_declaration */
{
#line 85 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_struct_declaration(ctx, (yypminor->yy6)); 
#line 1054 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 72: /* function */
{
#line 105 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_function(ctx, (yypminor->yy81)); 
#line 1061 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 73: /* at_attrib */
{
#line 80 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_at_attribute(ctx, (yypminor->yy44)); 
#line 1068 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 74: /* struct_member_list */
{
#line 89 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_struct_members(ctx, (yypminor->yy95)); 
#line 1075 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 75: /* struct_member */
{
#line 98 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_struct_member(ctx, (yypminor->yy120)); 
#line 1082 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 76: /* expression */
{
#line 263 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_expression(ctx, (yypminor->yy167)); 
#line 1089 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 77: /* return_type */
{
#line 110 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"

#line 1096 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 78: /* function_params */
    case 80: /* function_param_list */
{
#line 115 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_function_params(ctx, (yypminor->yy137)); 
#line 1104 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 79: /* statement_block */
    case 82: /* statement_list */
{
#line 134 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_statement_block(ctx, (yypminor->yy3)); 
#line 1112 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 81: /* function_param */
{
#line 129 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_function_param(ctx, (yypminor->yy178)); 
#line 1119 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 83: /* statement */
    case 87: /* assignment_statement */
    case 88: /* compound_assignment_statement */
    case 89: /* increment_statement */
    case 90: /* function_call_statement */
    case 94: /* for_initializer */
    case 95: /* for_step */
{
#line 144 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_statement(ctx, (yypminor->yy36)); 
#line 1132 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 84: /* var_declaration */
{
#line 246 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_var_declaration(ctx, (yypminor->yy50)); 
#line 1139 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 85: /* for_details */
{
#line 209 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_for_details(ctx, (yypminor->yy184)); 
#line 1146 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 86: /* switch_case_list */
{
#line 229 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_switch_cases(ctx, (yypminor->yy64)); 
#line 1153 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 91: /* assignment_statement_list */
{
#line 174 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_assignments(ctx, (yypminor->yy63)); 
#line 1160 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 93: /* arguments */
    case 97: /* argument_list */
{
#line 252 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_arguments(ctx, (yypminor->yy93)); 
#line 1168 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
    case 96: /* switch_case */
{
#line 236 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
 delete_switch_case(ctx, (yypminor->yy97)); 
#line 1175 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
}
      break;
/********* End destructor definitions *****************************************/
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
*/
static void yy_pop_parser_stack(yyParser *pParser){
  yyStackEntry *yytos;
  assert( pParser->yytos!=0 );
  assert( pParser->yytos > pParser->yystack );
  yytos = pParser->yytos--;
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yy_destructor(pParser, yytos->major, &yytos->minor);
}

/*
** Clear all secondary memory allocations from the parser
*/
void ParseSDLSLFinalize(void *p){
  yyParser *pParser = (yyParser*)p;
  while( pParser->yytos>pParser->yystack ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  if( pParser->yystack!=&pParser->yystk0 ) free(pParser->yystack);
#endif
}

#ifndef ParseSDLSL_ENGINEALWAYSONSTACK
/* 
** Deallocate and destroy a parser.  Destructors are called for
** all stack elements before shutting the parser down.
**
** If the YYPARSEFREENEVERNULL macro exists (for example because it
** is defined in a %include section of the input grammar) then it is
** assumed that the input pointer is never NULL.
*/
#if __SDL_SHADER__
static void ParseSDLSLFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*,void*),     /* Function used to reclaim memory */
  void *malloc_data
){
#ifndef YYPARSEFREENEVERNULL
  if( p==0 ) return;
#endif
  ParseSDLSLFinalize(p);
  (*freeProc)(p,malloc_data);
}
#else
void ParseSDLSLFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
#ifndef YYPARSEFREENEVERNULL
  if( p==0 ) return;
#endif
  ParseSDLSLFinalize(p);
  (*freeProc)(p);
}
#endif
#endif /* ParseSDLSL_ENGINEALWAYSONSTACK */

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseSDLSLStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyhwm;
}
#endif

/* This array of booleans keeps track of the parser statement
** coverage.  The element yycoverage[X][Y] is set when the parser
** is in state X and has a lookahead token Y.  In a well-tested
** systems, every element of this matrix should end up being set.
*/
#if defined(YYCOVERAGE)
static unsigned char yycoverage[YYNSTATE][YYNTOKEN];
#endif

/*
** Write into out a description of every state/lookahead combination that
**
**   (1)  has not been used by the parser, and
**   (2)  is not a syntax error.
**
** Return the number of missed state/lookahead combinations.
*/
#if defined(YYCOVERAGE)
int ParseSDLSLCoverage(FILE *out){
  int stateno, iLookAhead, i;
  int nMissed = 0;
  for(stateno=0; stateno<YYNSTATE; stateno++){
    i = yy_shift_ofst[stateno];
    for(iLookAhead=0; iLookAhead<YYNTOKEN; iLookAhead++){
      if( yy_lookahead[i+iLookAhead]!=iLookAhead ) continue;
      if( yycoverage[stateno][iLookAhead]==0 ) nMissed++;
      if( out ){
        fprintf(out,"State %d lookahead %s %s\n", stateno,
                yyTokenName[iLookAhead],
                yycoverage[stateno][iLookAhead] ? "ok" : "missed");
      }
    }
  }
  return nMissed;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
*/
static YYACTIONTYPE yy_find_shift_action(
  YYCODETYPE iLookAhead,    /* The look-ahead token */
  YYACTIONTYPE stateno      /* Current state number */
){
  int i;

  if( stateno>YY_MAX_SHIFT ) return stateno;
  assert( stateno <= YY_SHIFT_COUNT );
#if defined(YYCOVERAGE)
  yycoverage[stateno][iLookAhead] = 1;
#endif
  do{
    i = yy_shift_ofst[stateno];
    assert( i>=0 );
    assert( i<=YY_ACTTAB_COUNT );
    assert( i+YYNTOKEN<=(int)YY_NLOOKAHEAD );
    assert( iLookAhead!=YYNOCODE );
    assert( iLookAhead < YYNTOKEN );
    i += iLookAhead;
    assert( i<(int)YY_NLOOKAHEAD );
    if( yy_lookahead[i]!=iLookAhead ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      assert( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0]) );
      iFallback = yyFallback[iLookAhead];
      if( iFallback!=0 ){
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        assert( yyFallback[iFallback]==0 ); /* Fallback loop must terminate */
        iLookAhead = iFallback;
        continue;
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        assert( j<(int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])) );
        if( yy_lookahead[j]==YYWILDCARD && iLookAhead>0 ){
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead],
               yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
      return yy_default[stateno];
    }else{
      assert( i>=0 && i<(int)(sizeof(yy_action)/sizeof(yy_action[0])) );
      return yy_action[i];
    }
  }while(1);
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
*/
static YYACTIONTYPE yy_find_reduce_action(
  YYACTIONTYPE stateno,     /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser){
   ParseSDLSLARG_FETCH
   ParseSDLSLCTX_FETCH
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
/******** Begin %stack_overflow code ******************************************/
#line 30 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"

    // !!! FIXME: make this a proper fail() function.
    fail(ctx, "Giving up. Parser stack overflow");
#line 1411 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
/******** End %stack_overflow code ********************************************/
   ParseSDLSLARG_STORE /* Suppress warning about unused %extra_argument var */
   ParseSDLSLCTX_STORE
}

/*
** Print tracing information for a SHIFT action
*/
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
static void yyTraceShift(yyParser *yypParser, int yyNewState, const char *zTag){
  if( yyTraceFILE ){
    if( yyNewState<YYNSTATE ){
      fprintf(yyTraceFILE,"%s%s '%s', go to state %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState);
    }else{
      fprintf(yyTraceFILE,"%s%s '%s', pending reduce %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState - YY_MIN_REDUCE);
    }
  }
}
#else
# define yyTraceShift(X,Y,Z)
#endif

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  YYACTIONTYPE yyNewState,      /* The new state to shift in */
  YYCODETYPE yyMajor,           /* The major token to shift in */
  ParseSDLSLTOKENTYPE yyMinor        /* The minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yytos++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
    yypParser->yyhwm++;
    assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack) );
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yytos>yypParser->yystackEnd ){
    yypParser->yytos--;
    yyStackOverflow(yypParser);
    return;
  }
#else
  if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz] ){
    if( yyGrowStack(yypParser) ){
      yypParser->yytos--;
      yyStackOverflow(yypParser);
      return;
    }
  }
#endif
  if( yyNewState > YY_MAX_SHIFT ){
    yyNewState += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
  }
  yytos = yypParser->yytos;
  yytos->stateno = yyNewState;
  yytos->major = yyMajor;
  yytos->minor.yy0 = yyMinor;
  yyTraceShift(yypParser, yyNewState, "Shift");
}

/* For rule J, yyRuleInfoLhs[J] contains the symbol on the left-hand side
** of that rule */
static const YYCODETYPE yyRuleInfoLhs[] = {
    68,  /* (0) shader ::= translation_unit_list */
    69,  /* (1) translation_unit_list ::= translation_unit */
    69,  /* (2) translation_unit_list ::= translation_unit_list translation_unit */
    70,  /* (3) translation_unit ::= struct_declaration */
    70,  /* (4) translation_unit ::= function */
    73,  /* (5) at_attrib ::= AT IDENTIFIER */
    73,  /* (6) at_attrib ::= AT IDENTIFIER LPAREN INT_CONSTANT RPAREN */
    71,  /* (7) struct_declaration ::= STRUCT IDENTIFIER LBRACE struct_member_list RBRACE SEMICOLON */
    74,  /* (8) struct_member_list ::= struct_member */
    74,  /* (9) struct_member_list ::= struct_member_list struct_member */
    75,  /* (10) struct_member ::= IDENTIFIER IDENTIFIER SEMICOLON */
    75,  /* (11) struct_member ::= IDENTIFIER IDENTIFIER at_attrib SEMICOLON */
    75,  /* (12) struct_member ::= IDENTIFIER IDENTIFIER LBRACKET expression RBRACKET SEMICOLON */
    75,  /* (13) struct_member ::= IDENTIFIER IDENTIFIER LBRACKET expression RBRACKET at_attrib SEMICOLON */
    72,  /* (14) function ::= FUNCTION return_type IDENTIFIER function_params statement_block */
    72,  /* (15) function ::= FUNCTION return_type IDENTIFIER function_params at_attrib statement_block */
    77,  /* (16) return_type ::= VOID */
    77,  /* (17) return_type ::= IDENTIFIER */
    78,  /* (18) function_params ::= LPAREN RPAREN */
    78,  /* (19) function_params ::= LPAREN VOID RPAREN */
    78,  /* (20) function_params ::= LPAREN function_param_list RPAREN */
    80,  /* (21) function_param_list ::= function_param */
    80,  /* (22) function_param_list ::= function_param_list COMMA function_param */
    81,  /* (23) function_param ::= IDENTIFIER IDENTIFIER */
    81,  /* (24) function_param ::= IDENTIFIER IDENTIFIER at_attrib */
    79,  /* (25) statement_block ::= LBRACE RBRACE */
    79,  /* (26) statement_block ::= LBRACE statement_list RBRACE */
    82,  /* (27) statement_list ::= statement */
    82,  /* (28) statement_list ::= statement_list statement */
    83,  /* (29) statement ::= SEMICOLON */
    83,  /* (30) statement ::= BREAK SEMICOLON */
    83,  /* (31) statement ::= CONTINUE SEMICOLON */
    83,  /* (32) statement ::= DISCARD SEMICOLON */
    83,  /* (33) statement ::= var_declaration SEMICOLON */
    83,  /* (34) statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON */
    83,  /* (35) statement ::= WHILE LPAREN expression RPAREN statement */
    83,  /* (36) statement ::= FOR LPAREN for_details RPAREN statement */
    83,  /* (37) statement ::= IF LPAREN expression RPAREN statement */
    83,  /* (38) statement ::= IF LPAREN expression RPAREN statement ELSE statement */
    83,  /* (39) statement ::= SWITCH LPAREN expression RPAREN LBRACE switch_case_list RBRACE */
    83,  /* (40) statement ::= RETURN SEMICOLON */
    83,  /* (41) statement ::= RETURN expression SEMICOLON */
    83,  /* (42) statement ::= assignment_statement SEMICOLON */
    83,  /* (43) statement ::= compound_assignment_statement SEMICOLON */
    83,  /* (44) statement ::= increment_statement SEMICOLON */
    83,  /* (45) statement ::= function_call_statement SEMICOLON */
    83,  /* (46) statement ::= statement_block */
    87,  /* (47) assignment_statement ::= assignment_statement_list expression */
    91,  /* (48) assignment_statement_list ::= expression ASSIGN */
    91,  /* (49) assignment_statement_list ::= assignment_statement_list expression ASSIGN */
    88,  /* (50) compound_assignment_statement ::= expression compound_assignment_operator expression */
    92,  /* (51) compound_assignment_operator ::= PLUSASSIGN */
    92,  /* (52) compound_assignment_operator ::= MINUSASSIGN */
    92,  /* (53) compound_assignment_operator ::= STARASSIGN */
    92,  /* (54) compound_assignment_operator ::= SLASHASSIGN */
    92,  /* (55) compound_assignment_operator ::= PERCENTASSIGN */
    92,  /* (56) compound_assignment_operator ::= LSHIFTASSIGN */
    92,  /* (57) compound_assignment_operator ::= RSHIFTASSIGN */
    92,  /* (58) compound_assignment_operator ::= ANDASSIGN */
    92,  /* (59) compound_assignment_operator ::= ORASSIGN */
    92,  /* (60) compound_assignment_operator ::= XORASSIGN */
    89,  /* (61) increment_statement ::= PLUSPLUS expression */
    89,  /* (62) increment_statement ::= MINUSMINUS expression */
    89,  /* (63) increment_statement ::= expression PLUSPLUS */
    89,  /* (64) increment_statement ::= expression MINUSMINUS */
    90,  /* (65) function_call_statement ::= IDENTIFIER arguments */
    85,  /* (66) for_details ::= for_initializer SEMICOLON expression SEMICOLON for_step */
    85,  /* (67) for_details ::= for_initializer SEMICOLON SEMICOLON for_step */
    94,  /* (68) for_initializer ::= var_declaration */
    94,  /* (69) for_initializer ::= assignment_statement */
    94,  /* (70) for_initializer ::= compound_assignment_statement */
    94,  /* (71) for_initializer ::= increment_statement */
    94,  /* (72) for_initializer ::= */
    95,  /* (73) for_step ::= assignment_statement */
    95,  /* (74) for_step ::= compound_assignment_statement */
    95,  /* (75) for_step ::= increment_statement */
    95,  /* (76) for_step ::= */
    86,  /* (77) switch_case_list ::= switch_case */
    86,  /* (78) switch_case_list ::= switch_case_list switch_case */
    96,  /* (79) switch_case ::= CASE expression COLON statement */
    96,  /* (80) switch_case ::= CASE expression COLON */
    96,  /* (81) switch_case ::= DEFAULT COLON statement */
    96,  /* (82) switch_case ::= DEFAULT COLON */
    84,  /* (83) var_declaration ::= VAR IDENTIFIER IDENTIFIER */
    84,  /* (84) var_declaration ::= VAR IDENTIFIER IDENTIFIER ASSIGN expression */
    93,  /* (85) arguments ::= LPAREN RPAREN */
    93,  /* (86) arguments ::= LPAREN argument_list RPAREN */
    97,  /* (87) argument_list ::= expression */
    97,  /* (88) argument_list ::= argument_list COMMA expression */
    76,  /* (89) expression ::= IDENTIFIER */
    76,  /* (90) expression ::= INT_CONSTANT */
    76,  /* (91) expression ::= FLOAT_CONSTANT */
    76,  /* (92) expression ::= TRUE */
    76,  /* (93) expression ::= FALSE */
    76,  /* (94) expression ::= LPAREN expression RPAREN */
    76,  /* (95) expression ::= IDENTIFIER arguments */
    76,  /* (96) expression ::= PLUS expression */
    76,  /* (97) expression ::= MINUS expression */
    76,  /* (98) expression ::= COMPLEMENT expression */
    76,  /* (99) expression ::= EXCLAMATION expression */
    76,  /* (100) expression ::= expression STAR expression */
    76,  /* (101) expression ::= expression SLASH expression */
    76,  /* (102) expression ::= expression PERCENT expression */
    76,  /* (103) expression ::= expression PLUS expression */
    76,  /* (104) expression ::= expression MINUS expression */
    76,  /* (105) expression ::= expression LSHIFT expression */
    76,  /* (106) expression ::= expression RSHIFT expression */
    76,  /* (107) expression ::= expression LT expression */
    76,  /* (108) expression ::= expression GT expression */
    76,  /* (109) expression ::= expression LEQ expression */
    76,  /* (110) expression ::= expression GEQ expression */
    76,  /* (111) expression ::= expression EQL expression */
    76,  /* (112) expression ::= expression NEQ expression */
    76,  /* (113) expression ::= expression AND expression */
    76,  /* (114) expression ::= expression XOR expression */
    76,  /* (115) expression ::= expression OR expression */
    76,  /* (116) expression ::= expression ANDAND expression */
    76,  /* (117) expression ::= expression OROR expression */
    76,  /* (118) expression ::= expression QUESTION expression COLON expression */
    76,  /* (119) expression ::= expression LBRACKET expression RBRACKET */
    76,  /* (120) expression ::= expression DOT IDENTIFIER */
};

/* For rule J, yyRuleInfoNRhs[J] contains the negative of the number
** of symbols on the right-hand side of that rule. */
static const signed char yyRuleInfoNRhs[] = {
   -1,  /* (0) shader ::= translation_unit_list */
   -1,  /* (1) translation_unit_list ::= translation_unit */
   -2,  /* (2) translation_unit_list ::= translation_unit_list translation_unit */
   -1,  /* (3) translation_unit ::= struct_declaration */
   -1,  /* (4) translation_unit ::= function */
   -2,  /* (5) at_attrib ::= AT IDENTIFIER */
   -5,  /* (6) at_attrib ::= AT IDENTIFIER LPAREN INT_CONSTANT RPAREN */
   -6,  /* (7) struct_declaration ::= STRUCT IDENTIFIER LBRACE struct_member_list RBRACE SEMICOLON */
   -1,  /* (8) struct_member_list ::= struct_member */
   -2,  /* (9) struct_member_list ::= struct_member_list struct_member */
   -3,  /* (10) struct_member ::= IDENTIFIER IDENTIFIER SEMICOLON */
   -4,  /* (11) struct_member ::= IDENTIFIER IDENTIFIER at_attrib SEMICOLON */
   -6,  /* (12) struct_member ::= IDENTIFIER IDENTIFIER LBRACKET expression RBRACKET SEMICOLON */
   -7,  /* (13) struct_member ::= IDENTIFIER IDENTIFIER LBRACKET expression RBRACKET at_attrib SEMICOLON */
   -5,  /* (14) function ::= FUNCTION return_type IDENTIFIER function_params statement_block */
   -6,  /* (15) function ::= FUNCTION return_type IDENTIFIER function_params at_attrib statement_block */
   -1,  /* (16) return_type ::= VOID */
   -1,  /* (17) return_type ::= IDENTIFIER */
   -2,  /* (18) function_params ::= LPAREN RPAREN */
   -3,  /* (19) function_params ::= LPAREN VOID RPAREN */
   -3,  /* (20) function_params ::= LPAREN function_param_list RPAREN */
   -1,  /* (21) function_param_list ::= function_param */
   -3,  /* (22) function_param_list ::= function_param_list COMMA function_param */
   -2,  /* (23) function_param ::= IDENTIFIER IDENTIFIER */
   -3,  /* (24) function_param ::= IDENTIFIER IDENTIFIER at_attrib */
   -2,  /* (25) statement_block ::= LBRACE RBRACE */
   -3,  /* (26) statement_block ::= LBRACE statement_list RBRACE */
   -1,  /* (27) statement_list ::= statement */
   -2,  /* (28) statement_list ::= statement_list statement */
   -1,  /* (29) statement ::= SEMICOLON */
   -2,  /* (30) statement ::= BREAK SEMICOLON */
   -2,  /* (31) statement ::= CONTINUE SEMICOLON */
   -2,  /* (32) statement ::= DISCARD SEMICOLON */
   -2,  /* (33) statement ::= var_declaration SEMICOLON */
   -7,  /* (34) statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON */
   -5,  /* (35) statement ::= WHILE LPAREN expression RPAREN statement */
   -5,  /* (36) statement ::= FOR LPAREN for_details RPAREN statement */
   -5,  /* (37) statement ::= IF LPAREN expression RPAREN statement */
   -7,  /* (38) statement ::= IF LPAREN expression RPAREN statement ELSE statement */
   -7,  /* (39) statement ::= SWITCH LPAREN expression RPAREN LBRACE switch_case_list RBRACE */
   -2,  /* (40) statement ::= RETURN SEMICOLON */
   -3,  /* (41) statement ::= RETURN expression SEMICOLON */
   -2,  /* (42) statement ::= assignment_statement SEMICOLON */
   -2,  /* (43) statement ::= compound_assignment_statement SEMICOLON */
   -2,  /* (44) statement ::= increment_statement SEMICOLON */
   -2,  /* (45) statement ::= function_call_statement SEMICOLON */
   -1,  /* (46) statement ::= statement_block */
   -2,  /* (47) assignment_statement ::= assignment_statement_list expression */
   -2,  /* (48) assignment_statement_list ::= expression ASSIGN */
   -3,  /* (49) assignment_statement_list ::= assignment_statement_list expression ASSIGN */
   -3,  /* (50) compound_assignment_statement ::= expression compound_assignment_operator expression */
   -1,  /* (51) compound_assignment_operator ::= PLUSASSIGN */
   -1,  /* (52) compound_assignment_operator ::= MINUSASSIGN */
   -1,  /* (53) compound_assignment_operator ::= STARASSIGN */
   -1,  /* (54) compound_assignment_operator ::= SLASHASSIGN */
   -1,  /* (55) compound_assignment_operator ::= PERCENTASSIGN */
   -1,  /* (56) compound_assignment_operator ::= LSHIFTASSIGN */
   -1,  /* (57) compound_assignment_operator ::= RSHIFTASSIGN */
   -1,  /* (58) compound_assignment_operator ::= ANDASSIGN */
   -1,  /* (59) compound_assignment_operator ::= ORASSIGN */
   -1,  /* (60) compound_assignment_operator ::= XORASSIGN */
   -2,  /* (61) increment_statement ::= PLUSPLUS expression */
   -2,  /* (62) increment_statement ::= MINUSMINUS expression */
   -2,  /* (63) increment_statement ::= expression PLUSPLUS */
   -2,  /* (64) increment_statement ::= expression MINUSMINUS */
   -2,  /* (65) function_call_statement ::= IDENTIFIER arguments */
   -5,  /* (66) for_details ::= for_initializer SEMICOLON expression SEMICOLON for_step */
   -4,  /* (67) for_details ::= for_initializer SEMICOLON SEMICOLON for_step */
   -1,  /* (68) for_initializer ::= var_declaration */
   -1,  /* (69) for_initializer ::= assignment_statement */
   -1,  /* (70) for_initializer ::= compound_assignment_statement */
   -1,  /* (71) for_initializer ::= increment_statement */
    0,  /* (72) for_initializer ::= */
   -1,  /* (73) for_step ::= assignment_statement */
   -1,  /* (74) for_step ::= compound_assignment_statement */
   -1,  /* (75) for_step ::= increment_statement */
    0,  /* (76) for_step ::= */
   -1,  /* (77) switch_case_list ::= switch_case */
   -2,  /* (78) switch_case_list ::= switch_case_list switch_case */
   -4,  /* (79) switch_case ::= CASE expression COLON statement */
   -3,  /* (80) switch_case ::= CASE expression COLON */
   -3,  /* (81) switch_case ::= DEFAULT COLON statement */
   -2,  /* (82) switch_case ::= DEFAULT COLON */
   -3,  /* (83) var_declaration ::= VAR IDENTIFIER IDENTIFIER */
   -5,  /* (84) var_declaration ::= VAR IDENTIFIER IDENTIFIER ASSIGN expression */
   -2,  /* (85) arguments ::= LPAREN RPAREN */
   -3,  /* (86) arguments ::= LPAREN argument_list RPAREN */
   -1,  /* (87) argument_list ::= expression */
   -3,  /* (88) argument_list ::= argument_list COMMA expression */
   -1,  /* (89) expression ::= IDENTIFIER */
   -1,  /* (90) expression ::= INT_CONSTANT */
   -1,  /* (91) expression ::= FLOAT_CONSTANT */
   -1,  /* (92) expression ::= TRUE */
   -1,  /* (93) expression ::= FALSE */
   -3,  /* (94) expression ::= LPAREN expression RPAREN */
   -2,  /* (95) expression ::= IDENTIFIER arguments */
   -2,  /* (96) expression ::= PLUS expression */
   -2,  /* (97) expression ::= MINUS expression */
   -2,  /* (98) expression ::= COMPLEMENT expression */
   -2,  /* (99) expression ::= EXCLAMATION expression */
   -3,  /* (100) expression ::= expression STAR expression */
   -3,  /* (101) expression ::= expression SLASH expression */
   -3,  /* (102) expression ::= expression PERCENT expression */
   -3,  /* (103) expression ::= expression PLUS expression */
   -3,  /* (104) expression ::= expression MINUS expression */
   -3,  /* (105) expression ::= expression LSHIFT expression */
   -3,  /* (106) expression ::= expression RSHIFT expression */
   -3,  /* (107) expression ::= expression LT expression */
   -3,  /* (108) expression ::= expression GT expression */
   -3,  /* (109) expression ::= expression LEQ expression */
   -3,  /* (110) expression ::= expression GEQ expression */
   -3,  /* (111) expression ::= expression EQL expression */
   -3,  /* (112) expression ::= expression NEQ expression */
   -3,  /* (113) expression ::= expression AND expression */
   -3,  /* (114) expression ::= expression XOR expression */
   -3,  /* (115) expression ::= expression OR expression */
   -3,  /* (116) expression ::= expression ANDAND expression */
   -3,  /* (117) expression ::= expression OROR expression */
   -5,  /* (118) expression ::= expression QUESTION expression COLON expression */
   -4,  /* (119) expression ::= expression LBRACKET expression RBRACKET */
   -3,  /* (120) expression ::= expression DOT IDENTIFIER */
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
**
** The yyLookahead and yyLookaheadToken parameters provide reduce actions
** access to the lookahead token (if any).  The yyLookahead will be YYNOCODE
** if the lookahead token has already been consumed.  As this procedure is
** only called from one place, optimizing compilers will in-line it, which
** means that the extra parameters have no performance impact.
*/
static YYACTIONTYPE yy_reduce(
  yyParser *yypParser,         /* The parser */
  unsigned int yyruleno,       /* Number of the rule by which to reduce */
  int yyLookahead,             /* Lookahead token, or YYNOCODE if none */
  ParseSDLSLTOKENTYPE yyLookaheadToken  /* Value of the lookahead token */
  ParseSDLSLCTX_PDECL                   /* %extra_context */
){
  int yygoto;                     /* The next state */
  YYACTIONTYPE yyact;             /* The next action */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseSDLSLARG_FETCH
  (void)yyLookahead;
  (void)yyLookaheadToken;
  yymsp = yypParser->yytos;

  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
/********** Begin reduce actions **********************************************/
        YYMINORTYPE yylhsminor;
      case 0: /* shader ::= translation_unit_list */
#line 63 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ SDL_assert(!ctx->shader); ctx->shader = new_shader(ctx, yymsp[0].minor.yy33); }
#line 1774 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 1: /* translation_unit_list ::= translation_unit */
#line 67 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy33 = new_translation_units(ctx, yymsp[0].minor.yy142); }
#line 1779 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy33 = yylhsminor.yy33;
        break;
      case 2: /* translation_unit_list ::= translation_unit_list translation_unit */
#line 68 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy33->tail->next = yymsp[0].minor.yy142; yymsp[-1].minor.yy33->tail = yymsp[0].minor.yy142; yylhsminor.yy33 = yymsp[-1].minor.yy33; }
#line 1785 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-1].minor.yy33 = yylhsminor.yy33;
        break;
      case 3: /* translation_unit ::= struct_declaration */
#line 74 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy142 = new_struct_declaration_unit(ctx, yymsp[0].minor.yy6); }
#line 1791 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy142 = yylhsminor.yy142;
        break;
      case 4: /* translation_unit ::= function */
#line 75 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy142 = new_function_unit(ctx, yymsp[0].minor.yy81); }
#line 1797 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy142 = yylhsminor.yy142;
        break;
      case 5: /* at_attrib ::= AT IDENTIFIER */
#line 81 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy44 = new_at_attribute(ctx, yymsp[0].minor.yy0.string, NULL); }
#line 1803 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 6: /* at_attrib ::= AT IDENTIFIER LPAREN INT_CONSTANT RPAREN */
#line 82 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-4].minor.yy44 = new_at_attribute(ctx, yymsp[-3].minor.yy0.string, &yymsp[-1].minor.yy0.i64); }
#line 1808 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 7: /* struct_declaration ::= STRUCT IDENTIFIER LBRACE struct_member_list RBRACE SEMICOLON */
#line 86 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-5].minor.yy6 = new_struct_declaration(ctx, yymsp[-4].minor.yy0.string, yymsp[-2].minor.yy95); }
#line 1813 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 8: /* struct_member_list ::= struct_member */
#line 90 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy95 = new_struct_members(ctx, yymsp[0].minor.yy120); }
#line 1818 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy95 = yylhsminor.yy95;
        break;
      case 9: /* struct_member_list ::= struct_member_list struct_member */
#line 91 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy95->tail->next = yymsp[0].minor.yy120; yymsp[-1].minor.yy95->tail = yymsp[0].minor.yy120; yylhsminor.yy95 = yymsp[-1].minor.yy95; }
#line 1824 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-1].minor.yy95 = yylhsminor.yy95;
        break;
      case 10: /* struct_member ::= IDENTIFIER IDENTIFIER SEMICOLON */
#line 99 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy120 = new_struct_member(ctx, yymsp[-2].minor.yy0.string, yymsp[-1].minor.yy0.string, NULL, NULL); }
#line 1830 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy120 = yylhsminor.yy120;
        break;
      case 11: /* struct_member ::= IDENTIFIER IDENTIFIER at_attrib SEMICOLON */
#line 100 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy120 = new_struct_member(ctx, yymsp[-3].minor.yy0.string, yymsp[-2].minor.yy0.string, NULL, yymsp[-1].minor.yy44); }
#line 1836 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-3].minor.yy120 = yylhsminor.yy120;
        break;
      case 12: /* struct_member ::= IDENTIFIER IDENTIFIER LBRACKET expression RBRACKET SEMICOLON */
#line 101 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy120 = new_struct_member(ctx, yymsp[-5].minor.yy0.string, yymsp[-4].minor.yy0.string, yymsp[-2].minor.yy167, NULL); }
#line 1842 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-5].minor.yy120 = yylhsminor.yy120;
        break;
      case 13: /* struct_member ::= IDENTIFIER IDENTIFIER LBRACKET expression RBRACKET at_attrib SEMICOLON */
#line 102 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy120 = new_struct_member(ctx, yymsp[-6].minor.yy0.string, yymsp[-5].minor.yy0.string, yymsp[-3].minor.yy167, yymsp[-1].minor.yy44); }
#line 1848 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-6].minor.yy120 = yylhsminor.yy120;
        break;
      case 14: /* function ::= FUNCTION return_type IDENTIFIER function_params statement_block */
#line 106 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-4].minor.yy81 = new_function(ctx, yymsp[-3].minor.yy168, yymsp[-2].minor.yy0.string, yymsp[-1].minor.yy137, NULL, yymsp[0].minor.yy3); }
#line 1854 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 15: /* function ::= FUNCTION return_type IDENTIFIER function_params at_attrib statement_block */
#line 107 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-5].minor.yy81 = new_function(ctx, yymsp[-4].minor.yy168, yymsp[-3].minor.yy0.string, yymsp[-2].minor.yy137, yymsp[-1].minor.yy44, yymsp[0].minor.yy3); }
#line 1859 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 16: /* return_type ::= VOID */
#line 111 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy168 = NULL; }
#line 1864 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 17: /* return_type ::= IDENTIFIER */
#line 112 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy168 = yymsp[0].minor.yy0.string; }
#line 1869 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy168 = yylhsminor.yy168;
        break;
      case 18: /* function_params ::= LPAREN RPAREN */
#line 116 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy137 = NULL; }
#line 1875 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 19: /* function_params ::= LPAREN VOID RPAREN */
#line 117 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-2].minor.yy137 = NULL; }
#line 1880 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 20: /* function_params ::= LPAREN function_param_list RPAREN */
#line 118 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-2].minor.yy137 = yymsp[-1].minor.yy137; }
#line 1885 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 21: /* function_param_list ::= function_param */
#line 122 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy137 = new_function_params(ctx, yymsp[0].minor.yy178); }
#line 1890 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy137 = yylhsminor.yy137;
        break;
      case 22: /* function_param_list ::= function_param_list COMMA function_param */
#line 123 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-2].minor.yy137->tail->next = yymsp[0].minor.yy178; yymsp[-2].minor.yy137->tail = yymsp[0].minor.yy178; yylhsminor.yy137 = yymsp[-2].minor.yy137; }
#line 1896 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy137 = yylhsminor.yy137;
        break;
      case 23: /* function_param ::= IDENTIFIER IDENTIFIER */
#line 130 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy178 = new_function_param(ctx, yymsp[-1].minor.yy0.string, yymsp[0].minor.yy0.string, NULL); }
#line 1902 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-1].minor.yy178 = yylhsminor.yy178;
        break;
      case 24: /* function_param ::= IDENTIFIER IDENTIFIER at_attrib */
#line 131 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy178 = new_function_param(ctx, yymsp[-2].minor.yy0.string, yymsp[-1].minor.yy0.string, yymsp[0].minor.yy44); }
#line 1908 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy178 = yylhsminor.yy178;
        break;
      case 25: /* statement_block ::= LBRACE RBRACE */
#line 135 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy3 = new_statement_block(ctx, NULL); }
#line 1914 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 26: /* statement_block ::= LBRACE statement_list RBRACE */
#line 136 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-2].minor.yy3 = yymsp[-1].minor.yy3; }
#line 1919 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 27: /* statement_list ::= statement */
#line 140 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy3 = new_statement_block(ctx, yymsp[0].minor.yy36); }
#line 1924 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy3 = yylhsminor.yy3;
        break;
      case 28: /* statement_list ::= statement_list statement */
#line 141 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy3->tail->next = yymsp[0].minor.yy36; yymsp[-1].minor.yy3->tail = yymsp[0].minor.yy36; yylhsminor.yy3 = yymsp[-1].minor.yy3; }
#line 1930 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-1].minor.yy3 = yylhsminor.yy3;
        break;
      case 29: /* statement ::= SEMICOLON */
#line 145 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy36 = new_empty_statement(ctx); }
#line 1936 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 30: /* statement ::= BREAK SEMICOLON */
#line 146 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy36 = new_break_statement(ctx); }
#line 1941 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 31: /* statement ::= CONTINUE SEMICOLON */
#line 147 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy36 = new_continue_statement(ctx); }
#line 1946 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 32: /* statement ::= DISCARD SEMICOLON */
#line 148 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy36 = new_discard_statement(ctx); }
#line 1951 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 33: /* statement ::= var_declaration SEMICOLON */
#line 149 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy36 = new_var_declaration_statement(ctx, yymsp[-1].minor.yy50); }
#line 1956 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-1].minor.yy36 = yylhsminor.yy36;
        break;
      case 34: /* statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON */
#line 150 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-6].minor.yy36 = new_do_statement(ctx, yymsp[-5].minor.yy36, yymsp[-2].minor.yy167); }
#line 1962 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 35: /* statement ::= WHILE LPAREN expression RPAREN statement */
#line 151 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-4].minor.yy36 = new_while_statement(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy36); }
#line 1967 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 36: /* statement ::= FOR LPAREN for_details RPAREN statement */
#line 152 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-4].minor.yy36 = new_for_statement(ctx, yymsp[-2].minor.yy184, yymsp[0].minor.yy36); }
#line 1972 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 37: /* statement ::= IF LPAREN expression RPAREN statement */
#line 153 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-4].minor.yy36 = new_if_statement(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy36, NULL); }
#line 1977 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 38: /* statement ::= IF LPAREN expression RPAREN statement ELSE statement */
#line 154 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-6].minor.yy36 = new_if_statement(ctx, yymsp[-4].minor.yy167, yymsp[-2].minor.yy36, yymsp[0].minor.yy36); }
#line 1982 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 39: /* statement ::= SWITCH LPAREN expression RPAREN LBRACE switch_case_list RBRACE */
#line 155 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-6].minor.yy36 = new_switch_statement(ctx, yymsp[-4].minor.yy167, yymsp[-1].minor.yy64); }
#line 1987 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 40: /* statement ::= RETURN SEMICOLON */
#line 157 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy36 = new_return_statement(ctx, NULL); }
#line 1992 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 41: /* statement ::= RETURN expression SEMICOLON */
#line 158 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-2].minor.yy36 = new_return_statement(ctx, yymsp[-1].minor.yy167); }
#line 1997 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 42: /* statement ::= assignment_statement SEMICOLON */
      case 43: /* statement ::= compound_assignment_statement SEMICOLON */ yytestcase(yyruleno==43);
      case 44: /* statement ::= increment_statement SEMICOLON */ yytestcase(yyruleno==44);
      case 45: /* statement ::= function_call_statement SEMICOLON */ yytestcase(yyruleno==45);
#line 159 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy36 = yymsp[-1].minor.yy36; }
#line 2005 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-1].minor.yy36 = yylhsminor.yy36;
        break;
      case 46: /* statement ::= statement_block */
#line 163 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy36 = (SDL_SHADER_AstStatement *) yymsp[0].minor.yy3; }
#line 2011 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy36 = yylhsminor.yy36;
        break;
      case 47: /* assignment_statement ::= assignment_statement_list expression */
#line 171 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy36 = new_assignment_statement(ctx, yymsp[-1].minor.yy63, yymsp[0].minor.yy167); }
#line 2017 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-1].minor.yy36 = yylhsminor.yy36;
        break;
      case 48: /* assignment_statement_list ::= expression ASSIGN */
#line 175 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy63 = new_assignments(ctx, new_assignment(ctx, yymsp[-1].minor.yy167)); }
#line 2023 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-1].minor.yy63 = yylhsminor.yy63;
        break;
      case 49: /* assignment_statement_list ::= assignment_statement_list expression ASSIGN */
#line 176 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-2].minor.yy63->tail->next = new_assignment(ctx, yymsp[-1].minor.yy167); yymsp[-2].minor.yy63->tail = yymsp[-2].minor.yy63->tail->next; yylhsminor.yy63 = yymsp[-2].minor.yy63; }
#line 2029 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy63 = yylhsminor.yy63;
        break;
      case 50: /* compound_assignment_statement ::= expression compound_assignment_operator expression */
#line 181 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy36 = new_compound_assignment_statement(ctx, yymsp[-2].minor.yy167, yymsp[-1].minor.yy65, yymsp[0].minor.yy167); }
#line 2035 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy36 = yylhsminor.yy36;
        break;
      case 51: /* compound_assignment_operator ::= PLUSASSIGN */
#line 184 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy65 = SDL_SHADER_AST_STATEMENT_COMPOUNDASSIGNADD; }
#line 2041 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 52: /* compound_assignment_operator ::= MINUSASSIGN */
#line 185 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy65 = SDL_SHADER_AST_STATEMENT_COMPOUNDASSIGNSUB; }
#line 2046 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 53: /* compound_assignment_operator ::= STARASSIGN */
#line 186 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy65 = SDL_SHADER_AST_STATEMENT_COMPOUNDASSIGNMUL; }
#line 2051 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 54: /* compound_assignment_operator ::= SLASHASSIGN */
#line 187 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy65 = SDL_SHADER_AST_STATEMENT_COMPOUNDASSIGNDIV; }
#line 2056 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 55: /* compound_assignment_operator ::= PERCENTASSIGN */
#line 188 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy65 = SDL_SHADER_AST_STATEMENT_COMPOUNDASSIGNMOD; }
#line 2061 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 56: /* compound_assignment_operator ::= LSHIFTASSIGN */
#line 189 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy65 = SDL_SHADER_AST_STATEMENT_COMPOUNDASSIGNLSHIFT; }
#line 2066 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 57: /* compound_assignment_operator ::= RSHIFTASSIGN */
#line 190 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy65 = SDL_SHADER_AST_STATEMENT_COMPOUNDASSIGNRSHIFT; }
#line 2071 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 58: /* compound_assignment_operator ::= ANDASSIGN */
#line 191 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy65 = SDL_SHADER_AST_STATEMENT_COMPOUNDASSIGNAND; }
#line 2076 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 59: /* compound_assignment_operator ::= ORASSIGN */
#line 192 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy65 = SDL_SHADER_AST_STATEMENT_COMPOUNDASSIGNOR; }
#line 2081 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 60: /* compound_assignment_operator ::= XORASSIGN */
#line 193 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy65 = SDL_SHADER_AST_STATEMENT_COMPOUNDASSIGNXOR; }
#line 2086 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 61: /* increment_statement ::= PLUSPLUS expression */
#line 198 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy36 = new_preincrement_statement(ctx, yymsp[0].minor.yy167); }
#line 2091 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 62: /* increment_statement ::= MINUSMINUS expression */
#line 199 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy36 = new_predecrement_statement(ctx, yymsp[0].minor.yy167); }
#line 2096 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 63: /* increment_statement ::= expression PLUSPLUS */
#line 200 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy36 = new_postincrement_statement(ctx, yymsp[-1].minor.yy167); }
#line 2101 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-1].minor.yy36 = yylhsminor.yy36;
        break;
      case 64: /* increment_statement ::= expression MINUSMINUS */
#line 201 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy36 = new_postdecrement_statement(ctx, yymsp[-1].minor.yy167); }
#line 2107 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-1].minor.yy36 = yylhsminor.yy36;
        break;
      case 65: /* function_call_statement ::= IDENTIFIER arguments */
#line 206 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy36 = new_fncall_statement(ctx, yymsp[-1].minor.yy0.string, yymsp[0].minor.yy93); }
#line 2113 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-1].minor.yy36 = yylhsminor.yy36;
        break;
      case 66: /* for_details ::= for_initializer SEMICOLON expression SEMICOLON for_step */
#line 210 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy184 = new_for_details(ctx, yymsp[-4].minor.yy36, yymsp[-2].minor.yy167, yymsp[0].minor.yy36); }
#line 2119 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-4].minor.yy184 = yylhsminor.yy184;
        break;
      case 67: /* for_details ::= for_initializer SEMICOLON SEMICOLON for_step */
#line 211 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy184 = new_for_details(ctx, yymsp[-3].minor.yy36, NULL, yymsp[0].minor.yy36); }
#line 2125 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-3].minor.yy184 = yylhsminor.yy184;
        break;
      case 68: /* for_initializer ::= var_declaration */
#line 215 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy36 = new_var_declaration_statement(ctx, yymsp[0].minor.yy50); }
#line 2131 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy36 = yylhsminor.yy36;
        break;
      case 69: /* for_initializer ::= assignment_statement */
      case 70: /* for_initializer ::= compound_assignment_statement */ yytestcase(yyruleno==70);
      case 71: /* for_initializer ::= increment_statement */ yytestcase(yyruleno==71);
      case 73: /* for_step ::= assignment_statement */ yytestcase(yyruleno==73);
      case 74: /* for_step ::= compound_assignment_statement */ yytestcase(yyruleno==74);
      case 75: /* for_step ::= increment_statement */ yytestcase(yyruleno==75);
#line 216 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy36 = yymsp[0].minor.yy36; }
#line 2142 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy36 = yylhsminor.yy36;
        break;
      case 72: /* for_initializer ::= */
      case 76: /* for_step ::= */ yytestcase(yyruleno==76);
#line 219 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[1].minor.yy36 = NULL; }
#line 2149 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 77: /* switch_case_list ::= switch_case */
#line 230 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy64 = new_switch_cases(ctx, yymsp[0].minor.yy97); }
#line 2154 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy64 = yylhsminor.yy64;
        break;
      case 78: /* switch_case_list ::= switch_case_list switch_case */
#line 231 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy64->tail->next = yymsp[0].minor.yy97; yymsp[-1].minor.yy64->tail = yymsp[0].minor.yy97; yylhsminor.yy64 = yymsp[-1].minor.yy64; }
#line 2160 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-1].minor.yy64 = yylhsminor.yy64;
        break;
      case 79: /* switch_case ::= CASE expression COLON statement */
#line 237 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-3].minor.yy97 = new_switch_case(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy36); }
#line 2166 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 80: /* switch_case ::= CASE expression COLON */
#line 238 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-2].minor.yy97 = new_switch_case(ctx, yymsp[-1].minor.yy167, NULL); }
#line 2171 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 81: /* switch_case ::= DEFAULT COLON statement */
#line 239 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-2].minor.yy97 = new_switch_case(ctx, NULL, yymsp[0].minor.yy36); }
#line 2176 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 82: /* switch_case ::= DEFAULT COLON */
#line 240 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy97 = new_switch_case(ctx, NULL, NULL); }
#line 2181 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 83: /* var_declaration ::= VAR IDENTIFIER IDENTIFIER */
#line 248 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-2].minor.yy50 = new_var_declaration(ctx, yymsp[-1].minor.yy0.string, yymsp[0].minor.yy0.string, NULL); }
#line 2186 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 84: /* var_declaration ::= VAR IDENTIFIER IDENTIFIER ASSIGN expression */
#line 249 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-4].minor.yy50 = new_var_declaration(ctx, yymsp[-3].minor.yy0.string, yymsp[-2].minor.yy0.string, yymsp[0].minor.yy167); }
#line 2191 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 85: /* arguments ::= LPAREN RPAREN */
#line 253 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy93 = NULL; }
#line 2196 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 86: /* arguments ::= LPAREN argument_list RPAREN */
#line 254 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-2].minor.yy93 = yymsp[-1].minor.yy93; }
#line 2201 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 87: /* argument_list ::= expression */
#line 258 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy93 = new_arguments(ctx, new_argument(ctx, yymsp[0].minor.yy167)); }
#line 2206 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy93 = yylhsminor.yy93;
        break;
      case 88: /* argument_list ::= argument_list COMMA expression */
#line 259 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-2].minor.yy93->tail->next = new_argument(ctx, yymsp[0].minor.yy167); yymsp[-2].minor.yy93->tail = yymsp[-2].minor.yy93->tail->next; yylhsminor.yy93 = yymsp[-2].minor.yy93; }
#line 2212 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy93 = yylhsminor.yy93;
        break;
      case 89: /* expression ::= IDENTIFIER */
#line 264 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_identifier_expression(ctx, yymsp[0].minor.yy0.string); }
#line 2218 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy167 = yylhsminor.yy167;
        break;
      case 90: /* expression ::= INT_CONSTANT */
#line 265 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_int_expression(ctx, yymsp[0].minor.yy0.i64); }
#line 2224 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy167 = yylhsminor.yy167;
        break;
      case 91: /* expression ::= FLOAT_CONSTANT */
#line 266 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_float_expression(ctx, yymsp[0].minor.yy0.dbl); }
#line 2230 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[0].minor.yy167 = yylhsminor.yy167;
        break;
      case 92: /* expression ::= TRUE */
#line 267 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy167 = new_bool_expression(ctx, 1); }
#line 2236 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 93: /* expression ::= FALSE */
#line 268 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[0].minor.yy167 = new_bool_expression(ctx, 0); }
#line 2241 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 94: /* expression ::= LPAREN expression RPAREN */
#line 269 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-2].minor.yy167 = new_parentheses_expression(ctx, yymsp[-1].minor.yy167); }
#line 2246 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 95: /* expression ::= IDENTIFIER arguments */
#line 270 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_fncall_expression(ctx, yymsp[-1].minor.yy0.string, yymsp[0].minor.yy93); }
#line 2251 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-1].minor.yy167 = yylhsminor.yy167;
        break;
      case 96: /* expression ::= PLUS expression */
#line 271 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy167 = new_unaryplus_expression(ctx, yymsp[0].minor.yy167); }
#line 2257 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 97: /* expression ::= MINUS expression */
#line 272 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy167 = new_unaryminus_expression(ctx, yymsp[0].minor.yy167); }
#line 2262 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 98: /* expression ::= COMPLEMENT expression */
#line 273 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy167 = new_unarycompl_expression(ctx, yymsp[0].minor.yy167); }
#line 2267 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 99: /* expression ::= EXCLAMATION expression */
#line 274 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yymsp[-1].minor.yy167 = new_unarynot_expression(ctx, yymsp[0].minor.yy167); }
#line 2272 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
        break;
      case 100: /* expression ::= expression STAR expression */
#line 275 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_multiply_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2277 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 101: /* expression ::= expression SLASH expression */
#line 276 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_divide_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2283 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 102: /* expression ::= expression PERCENT expression */
#line 277 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_mod_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2289 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 103: /* expression ::= expression PLUS expression */
#line 278 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_addition_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2295 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 104: /* expression ::= expression MINUS expression */
#line 279 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_subtraction_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2301 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 105: /* expression ::= expression LSHIFT expression */
#line 280 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_lshift_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2307 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 106: /* expression ::= expression RSHIFT expression */
#line 281 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_rshift_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2313 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 107: /* expression ::= expression LT expression */
#line 282 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_lt_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2319 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 108: /* expression ::= expression GT expression */
#line 283 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_gt_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2325 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 109: /* expression ::= expression LEQ expression */
#line 284 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_leq_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2331 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 110: /* expression ::= expression GEQ expression */
#line 285 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_geq_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2337 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 111: /* expression ::= expression EQL expression */
#line 286 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_eql_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2343 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 112: /* expression ::= expression NEQ expression */
#line 287 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_neq_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2349 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 113: /* expression ::= expression AND expression */
#line 288 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_and_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2355 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 114: /* expression ::= expression XOR expression */
#line 289 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_xor_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2361 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 115: /* expression ::= expression OR expression */
#line 290 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_or_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2367 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 116: /* expression ::= expression ANDAND expression */
#line 291 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_andand_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2373 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 117: /* expression ::= expression OROR expression */
#line 292 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_oror_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2379 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      case 118: /* expression ::= expression QUESTION expression COLON expression */
#line 293 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_conditional_expression(ctx, yymsp[-4].minor.yy167, yymsp[-2].minor.yy167, yymsp[0].minor.yy167); }
#line 2385 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-4].minor.yy167 = yylhsminor.yy167;
        break;
      case 119: /* expression ::= expression LBRACKET expression RBRACKET */
#line 294 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_array_dereference_expression(ctx, yymsp[-3].minor.yy167, yymsp[-1].minor.yy167); }
#line 2391 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-3].minor.yy167 = yylhsminor.yy167;
        break;
      case 120: /* expression ::= expression DOT IDENTIFIER */
#line 295 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"
{ yylhsminor.yy167 = new_struct_dereference_expression(ctx, yymsp[-2].minor.yy167, yymsp[0].minor.yy0.string); }
#line 2397 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
  yymsp[-2].minor.yy167 = yylhsminor.yy167;
        break;
      default:
        break;
/********** End reduce actions ************************************************/
  };
  assert( yyruleno<sizeof(yyRuleInfoLhs)/sizeof(yyRuleInfoLhs[0]) );
  yygoto = yyRuleInfoLhs[yyruleno];
  yysize = yyRuleInfoNRhs[yyruleno];
  yyact = yy_find_reduce_action(yymsp[yysize].stateno,(YYCODETYPE)yygoto);

  /* There are no SHIFTREDUCE actions on nonterminals because the table
  ** generator has simplified them to pure REDUCE actions. */
  assert( !(yyact>YY_MAX_SHIFT && yyact<=YY_MAX_SHIFTREDUCE) );

  /* It is not possible for a REDUCE to be followed by an error */
  assert( yyact!=YY_ERROR_ACTION );

  yymsp += yysize+1;
  yypParser->yytos = yymsp;
  yymsp->stateno = (YYACTIONTYPE)yyact;
  yymsp->major = (YYCODETYPE)yygoto;
  yyTraceShift(yypParser, yyact, "... then shift");
  return yyact;
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseSDLSLARG_FETCH
  ParseSDLSLCTX_FETCH
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
/************ Begin %parse_failure code ***************************************/
#line 25 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"

    // !!! FIXME: make this a proper fail() function.
    fail(ctx, "Giving up. Parser is hopelessly lost...");
#line 2446 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
/************ End %parse_failure code *****************************************/
  ParseSDLSLARG_STORE /* Suppress warning about unused %extra_argument variable */
  ParseSDLSLCTX_STORE
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  ParseSDLSLTOKENTYPE yyminor         /* The minor type of the error token */
){
  ParseSDLSLARG_FETCH
  ParseSDLSLCTX_FETCH
#define TOKEN yyminor
/************ Begin %syntax_error code ****************************************/
#line 20 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.lemon"

    // !!! FIXME: make this a proper fail() function.
    fail(ctx, "Syntax error");
#line 2469 "/home/icculus/projects/SDL_shader_tools/SDL_shader_parser.h"
/************ End %syntax_error code ******************************************/
  ParseSDLSLARG_STORE /* Suppress warning about unused %extra_argument variable */
  ParseSDLSLCTX_STORE
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseSDLSLARG_FETCH
  ParseSDLSLCTX_FETCH
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  assert( yypParser->yytos==yypParser->yystack );
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
/*********** Begin %parse_accept code *****************************************/
/*********** End %parse_accept code *******************************************/
  ParseSDLSLARG_STORE /* Suppress warning about unused %extra_argument variable */
  ParseSDLSLCTX_STORE
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseSDLSLAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
#if __SDL_SHADER__
static
#endif
void ParseSDLSL(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseSDLSLTOKENTYPE yyminor       /* The value for the token */
  ParseSDLSLARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  YYACTIONTYPE yyact;   /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser = (yyParser*)yyp;  /* The parser */
  ParseSDLSLCTX_FETCH
  ParseSDLSLARG_STORE

  assert( yypParser->yytos!=0 );
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif

  yyact = yypParser->yytos->stateno;
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
  if( yyTraceFILE ){
    if( yyact < YY_MIN_REDUCE ){
      fprintf(yyTraceFILE,"%sInput '%s' in state %d\n",
              yyTracePrompt,yyTokenName[yymajor],yyact);
    }else{
      fprintf(yyTraceFILE,"%sInput '%s' with pending reduce %d\n",
              yyTracePrompt,yyTokenName[yymajor],yyact-YY_MIN_REDUCE);
    }
  }
#endif

  while(1){ /* Exit by "break" */
    assert( yypParser->yytos>=yypParser->yystack );
    assert( yyact==yypParser->yytos->stateno );
    yyact = yy_find_shift_action((YYCODETYPE)yymajor,yyact);
    if( yyact >= YY_MIN_REDUCE ){
      unsigned int yyruleno = yyact - YY_MIN_REDUCE; /* Reduce by this rule */
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
      assert( yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) );
      if( yyTraceFILE ){
        int yysize = yyRuleInfoNRhs[yyruleno];
        if( yysize ){
          fprintf(yyTraceFILE, "%sReduce %d [%s]%s, pop back to state %d.\n",
            yyTracePrompt,
            yyruleno, yyRuleName[yyruleno],
            yyruleno<YYNRULE_WITH_ACTION ? "" : " without external action",
            yypParser->yytos[yysize].stateno);
        }else{
          fprintf(yyTraceFILE, "%sReduce %d [%s]%s.\n",
            yyTracePrompt, yyruleno, yyRuleName[yyruleno],
            yyruleno<YYNRULE_WITH_ACTION ? "" : " without external action");
        }
      }
#endif /* NDEBUG */

      /* Check that the stack is large enough to grow by a single entry
      ** if the RHS of the rule is empty.  This ensures that there is room
      ** enough on the stack to push the LHS value */
      if( yyRuleInfoNRhs[yyruleno]==0 ){
#ifdef YYTRACKMAXSTACKDEPTH
        if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
          yypParser->yyhwm++;
          assert( yypParser->yyhwm ==
                  (int)(yypParser->yytos - yypParser->yystack));
        }
#endif
#if YYSTACKDEPTH>0 
        if( yypParser->yytos>=yypParser->yystackEnd ){
          yyStackOverflow(yypParser);
          break;
        }
#else
        if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz-1] ){
          if( yyGrowStack(yypParser) ){
            yyStackOverflow(yypParser);
            break;
          }
        }
#endif
      }
      yyact = yy_reduce(yypParser,yyruleno,yymajor,yyminor ParseSDLSLCTX_PARAM);
    }else if( yyact <= YY_MAX_SHIFTREDUCE ){
      yy_shift(yypParser,yyact,(YYCODETYPE)yymajor,yyminor);
#ifndef YYNOERRORRECOVERY
      yypParser->yyerrcnt--;
#endif
      break;
    }else if( yyact==YY_ACCEPT_ACTION ){
      yypParser->yytos--;
      yy_accept(yypParser);
      return;
    }else{
      assert( yyact == YY_ERROR_ACTION );
      yyminorunion.yy0 = yyminor;
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminor);
      }
      yymx = yypParser->yytos->major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor, &yyminorunion);
        yymajor = YYNOCODE;
      }else{
        while( yypParser->yytos > yypParser->yystack ){
          yyact = yy_find_reduce_action(yypParser->yytos->stateno,
                                        YYERRORSYMBOL);
          if( yyact<=YY_MAX_SHIFTREDUCE ) break;
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yytos <= yypParser->yystack || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
          yypParser->yyerrcnt = -1;
#endif
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          yy_shift(yypParser,yyact,YYERRORSYMBOL,yyminor);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
      if( yymajor==YYNOCODE ) break;
      yyact = yypParser->yytos->stateno;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor, yyminor);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      break;
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor, yyminor);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
        yypParser->yyerrcnt = -1;
#endif
      }
      break;
#endif
    }
  }
#if LEMON_SUPPORT_TRACING   /* __SDL_SHADER__ */
  if( yyTraceFILE ){
    yyStackEntry *i;
    char cDiv = '[';
    fprintf(yyTraceFILE,"%sReturn. Stack=",yyTracePrompt);
    for(i=&yypParser->yystack[1]; i<=yypParser->yytos; i++){
      fprintf(yyTraceFILE,"%c%s", cDiv, yyTokenName[i->major]);
      cDiv = ' ';
    }
    fprintf(yyTraceFILE,"]\n");
  }
#endif
  return;
}

/*
** Return the fallback token corresponding to canonical token iToken, or
** 0 if iToken has no fallback.
*/
#if __SDL_SHADER__
static
#endif
int ParseSDLSLFallback(int iToken){
#ifdef YYFALLBACK
  assert( iToken<(int)(sizeof(yyFallback)/sizeof(yyFallback[0])) );
  return yyFallback[iToken];
#else
  (void)iToken;
  return 0;
#endif
}
